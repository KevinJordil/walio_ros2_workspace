// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: opencn_interface.capnp

#include "opencn_pkg/opencn-interface/opencn_interface.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<66> b_8bef39bd9f14136b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
     23,   0,   0,   0,   3,   0,   0,   0,
    164, 113, 131,  67,  32, 101, 162, 141,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,  87,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 199,   0,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   1,   0,   1,   0,
     58,  54, 239,  27, 175,  71,  66, 241,
     33,   0,   0,   0,  42,   0,   0,   0,
     68, 111,  41, 241, 175, 217,   0, 189,
     29,   0,   0,   0,  58,   0,   0,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
     25,   0,   0,   0,  90,   0,   0,   0,
    217, 240,  61, 201, 183, 153, 146, 137,
     25,   0,   0,   0,  58,   0,   0,   0,
     45, 110, 203, 240, 126, 243, 135, 204,
     21,   0,   0,   0,  58,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
     65,  99,  99, 101, 115, 115,   0,   0,
     77, 111, 100, 101, 108,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     65,  99, 116, 105, 111, 110,   0,   0,
     82, 101, 115, 117, 108, 116,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    138, 196, 177, 134, 245,  29, 175, 242,
    243, 220, 243,  17,  88, 155, 156, 142,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    198,   6, 165,  24, 166, 234,   0, 242,
    144, 191, 247, 117, 178, 160,  55, 247,
     57,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    199, 185, 147, 119,  54, 100, 141, 228,
    101,   0, 244, 183, 219, 229, 238, 191,
     33,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  86,  97, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  86,  97, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97,  99, 116, 105, 111, 110, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8bef39bd9f14136b = b_8bef39bd9f14136b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8bef39bd9f14136b[] = {
  &s_8e9c9b5811f3dcf3,
  &s_bfeee5dbb7f40065,
  &s_e48d64367793b9c7,
  &s_f200eaa618a506c6,
  &s_f2af1df586b1c48a,
  &s_f737a0b275f7bf90,
};
static const uint16_t m_8bef39bd9f14136b[] = {2, 0, 1};
const ::capnp::_::RawSchema s_8bef39bd9f14136b = {
  0x8bef39bd9f14136b, b_8bef39bd9f14136b.words, 66, d_8bef39bd9f14136b, m_8bef39bd9f14136b,
  6, 3, nullptr, nullptr, nullptr, { &s_8bef39bd9f14136b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f14247af1bef363a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58,  54, 239,  27, 175,  71,  66, 241,
     34,   0,   0,   0,   2,   0,   0,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  84, 121, 112, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 116,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,   0,   0,   0,
    115,  51,  50,   0,   0,   0,   0,   0,
    117,  51,  50,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f14247af1bef363a = b_f14247af1bef363a.words;
#if !CAPNP_LITE
static const uint16_t m_f14247af1bef363a[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_f14247af1bef363a = {
  0xf14247af1bef363a, b_f14247af1bef363a.words, 35, nullptr, m_f14247af1bef363a,
  0, 4, nullptr, nullptr, nullptr, { &s_f14247af1bef363a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_f14247af1bef363a, f14247af1bef363a);
static const ::capnp::_::AlignedData<28> b_bd00d9aff1296f44 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68, 111,  41, 241, 175, 217,   0, 189,
     34,   0,   0,   0,   2,   0,   0,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  65,  99,  99, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
    115, 101, 116,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd00d9aff1296f44 = b_bd00d9aff1296f44.words;
#if !CAPNP_LITE
static const uint16_t m_bd00d9aff1296f44[] = {0, 1};
const ::capnp::_::RawSchema s_bd00d9aff1296f44 = {
  0xbd00d9aff1296f44, b_bd00d9aff1296f44.words, 28, nullptr, m_bd00d9aff1296f44,
  0, 2, nullptr, nullptr, nullptr, { &s_bd00d9aff1296f44, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Access_bd00d9aff1296f44, bd00d9aff1296f44);
static const ::capnp::_::AlignedData<28> b_fdf68276fc573956 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
     34,   0,   0,   0,   1,   0,   2,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  77, 111, 100, 101, 108,  86,
     97, 108, 117, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     14, 233, 158, 113, 218, 164,  60, 176,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0, }
};
::capnp::word const* const bp_fdf68276fc573956 = b_fdf68276fc573956.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fdf68276fc573956[] = {
  &s_b03ca4da719ee90e,
};
static const uint16_t m_fdf68276fc573956[] = {0};
static const uint16_t i_fdf68276fc573956[] = {0};
const ::capnp::_::RawSchema s_fdf68276fc573956 = {
  0xfdf68276fc573956, b_fdf68276fc573956.words, 28, d_fdf68276fc573956, m_fdf68276fc573956,
  1, 1, i_fdf68276fc573956, nullptr, nullptr, { &s_fdf68276fc573956, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<80> b_b03ca4da719ee90e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 233, 158, 113, 218, 164,  60, 176,
     45,   0,   0,   0,   1,   0,   2,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
      0,   0,   7,   0,   1,   0,   4,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  77, 111, 100, 101, 108,  86,
     97, 108, 117, 101,  46, 118,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    117,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b03ca4da719ee90e = b_b03ca4da719ee90e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b03ca4da719ee90e[] = {
  &s_fdf68276fc573956,
};
static const uint16_t m_b03ca4da719ee90e[] = {3, 2, 1, 0};
static const uint16_t i_b03ca4da719ee90e[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b03ca4da719ee90e = {
  0xb03ca4da719ee90e, b_b03ca4da719ee90e.words, 80, d_b03ca4da719ee90e, m_b03ca4da719ee90e,
  1, 4, i_b03ca4da719ee90e, nullptr, nullptr, { &s_b03ca4da719ee90e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_899299b7c93df0d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217, 240,  61, 201, 183, 153, 146, 137,
     34,   0,   0,   0,   1,   0,   1,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  65,  99, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 105, 111, 110,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     68, 111,  41, 241, 175, 217,   0, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_899299b7c93df0d9 = b_899299b7c93df0d9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_899299b7c93df0d9[] = {
  &s_bd00d9aff1296f44,
  &s_fdf68276fc573956,
};
static const uint16_t m_899299b7c93df0d9[] = {1, 0, 2};
static const uint16_t i_899299b7c93df0d9[] = {0, 1, 2};
const ::capnp::_::RawSchema s_899299b7c93df0d9 = {
  0x899299b7c93df0d9, b_899299b7c93df0d9.words, 65, d_899299b7c93df0d9, m_899299b7c93df0d9,
  2, 3, i_899299b7c93df0d9, nullptr, nullptr, { &s_899299b7c93df0d9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cc87f37ef0cb6e2d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     45, 110, 203, 240, 126, 243, 135, 204,
     34,   0,   0,   0,   1,   0,   1,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  82, 101, 115, 117, 108, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc87f37ef0cb6e2d = b_cc87f37ef0cb6e2d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cc87f37ef0cb6e2d[] = {
  &s_fdf68276fc573956,
};
static const uint16_t m_cc87f37ef0cb6e2d[] = {1, 0};
static const uint16_t i_cc87f37ef0cb6e2d[] = {0, 1};
const ::capnp::_::RawSchema s_cc87f37ef0cb6e2d = {
  0xcc87f37ef0cb6e2d, b_cc87f37ef0cb6e2d.words, 50, d_cc87f37ef0cb6e2d, m_cc87f37ef0cb6e2d,
  1, 2, i_cc87f37ef0cb6e2d, nullptr, nullptr, { &s_cc87f37ef0cb6e2d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f2af1df586b1c48a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138, 196, 177, 134, 245,  29, 175, 242,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46, 103, 101, 116,  86,  97, 108,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2af1df586b1c48a = b_f2af1df586b1c48a.words;
#if !CAPNP_LITE
static const uint16_t m_f2af1df586b1c48a[] = {0};
static const uint16_t i_f2af1df586b1c48a[] = {0};
const ::capnp::_::RawSchema s_f2af1df586b1c48a = {
  0xf2af1df586b1c48a, b_f2af1df586b1c48a.words, 34, nullptr, m_f2af1df586b1c48a,
  0, 1, i_f2af1df586b1c48a, nullptr, nullptr, { &s_f2af1df586b1c48a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8e9c9b5811f3dcf3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243, 220, 243,  17,  88, 155, 156, 142,
     34,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46, 103, 101, 116,  86,  97, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e9c9b5811f3dcf3 = b_8e9c9b5811f3dcf3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8e9c9b5811f3dcf3[] = {
  &s_fdf68276fc573956,
};
static const uint16_t m_8e9c9b5811f3dcf3[] = {1, 0};
static const uint16_t i_8e9c9b5811f3dcf3[] = {0, 1};
const ::capnp::_::RawSchema s_8e9c9b5811f3dcf3 = {
  0x8e9c9b5811f3dcf3, b_8e9c9b5811f3dcf3.words, 50, d_8e9c9b5811f3dcf3, m_8e9c9b5811f3dcf3,
  1, 2, i_8e9c9b5811f3dcf3, nullptr, nullptr, { &s_8e9c9b5811f3dcf3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_f200eaa618a506c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198,   6, 165,  24, 166, 234,   0, 242,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46, 115, 101, 116,  86,  97, 108,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     86,  57,  87, 252, 118, 130, 246, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f200eaa618a506c6 = b_f200eaa618a506c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f200eaa618a506c6[] = {
  &s_fdf68276fc573956,
};
static const uint16_t m_f200eaa618a506c6[] = {0, 1};
static const uint16_t i_f200eaa618a506c6[] = {0, 1};
const ::capnp::_::RawSchema s_f200eaa618a506c6 = {
  0xf200eaa618a506c6, b_f200eaa618a506c6.words, 49, d_f200eaa618a506c6, m_f200eaa618a506c6,
  1, 2, i_f200eaa618a506c6, nullptr, nullptr, { &s_f200eaa618a506c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f737a0b275f7bf90 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 191, 247, 117, 178, 160,  55, 247,
     34,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46, 115, 101, 116,  86,  97, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f737a0b275f7bf90 = b_f737a0b275f7bf90.words;
#if !CAPNP_LITE
static const uint16_t m_f737a0b275f7bf90[] = {0};
static const uint16_t i_f737a0b275f7bf90[] = {0};
const ::capnp::_::RawSchema s_f737a0b275f7bf90 = {
  0xf737a0b275f7bf90, b_f737a0b275f7bf90.words, 35, nullptr, m_f737a0b275f7bf90,
  0, 1, i_f737a0b275f7bf90, nullptr, nullptr, { &s_f737a0b275f7bf90, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_e48d64367793b9c7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199, 185, 147, 119,  54, 100, 141, 228,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  97,  99, 116, 105, 111, 110,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 116, 105, 111, 110, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    217, 240,  61, 201, 183, 153, 146, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e48d64367793b9c7 = b_e48d64367793b9c7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e48d64367793b9c7[] = {
  &s_899299b7c93df0d9,
};
static const uint16_t m_e48d64367793b9c7[] = {0};
static const uint16_t i_e48d64367793b9c7[] = {0};
const ::capnp::_::RawSchema s_e48d64367793b9c7 = {
  0xe48d64367793b9c7, b_e48d64367793b9c7.words, 39, d_e48d64367793b9c7, m_e48d64367793b9c7,
  1, 1, i_e48d64367793b9c7, nullptr, nullptr, { &s_e48d64367793b9c7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_bfeee5dbb7f40065 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101,   0, 244, 183, 219, 229, 238, 191,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  77, 111, 100, 101,
    108,  46,  97,  99, 116, 105, 111, 110,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     45, 110, 203, 240, 126, 243, 135, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfeee5dbb7f40065 = b_bfeee5dbb7f40065.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bfeee5dbb7f40065[] = {
  &s_cc87f37ef0cb6e2d,
};
static const uint16_t m_bfeee5dbb7f40065[] = {0};
static const uint16_t i_bfeee5dbb7f40065[] = {0};
const ::capnp::_::RawSchema s_bfeee5dbb7f40065 = {
  0xbfeee5dbb7f40065, b_bfeee5dbb7f40065.words, 39, d_bfeee5dbb7f40065, m_bfeee5dbb7f40065,
  1, 1, i_bfeee5dbb7f40065, nullptr, nullptr, { &s_bfeee5dbb7f40065, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_da8fd131c56cb627 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     39, 182, 108, 197,  49, 209, 143, 218,
     23,   0,   0,   0,   3,   0,   0,   0,
    164, 113, 131,  67,  32, 101, 162, 141,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  71,   0,   0,   0,
    105,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    132,  94, 223,  38,  50,  73,  77, 221,
      9,   0,   0,   0,  74,   0,   0,   0,
     18,  56, 218, 223, 195, 222,  50, 156,
      9,   0,   0,   0,  50,   0,   0,   0,
     80,  97, 114,  97, 109,  68, 105, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,  97, 114,  97, 109,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  56, 143, 253,  52, 238, 229, 215,
    209, 196, 178,  45, 251, 249, 159, 220,
     17,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  80,  97, 114,  97, 109,
     76, 105, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da8fd131c56cb627 = b_da8fd131c56cb627.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da8fd131c56cb627[] = {
  &s_8bef39bd9f14136b,
  &s_d7e5ee34fd8f3862,
  &s_dc9ff9fb2db2c4d1,
};
static const uint16_t m_da8fd131c56cb627[] = {0};
const ::capnp::_::RawSchema s_da8fd131c56cb627 = {
  0xda8fd131c56cb627, b_da8fd131c56cb627.words, 40, d_da8fd131c56cb627, m_da8fd131c56cb627,
  3, 1, nullptr, nullptr, nullptr, { &s_da8fd131c56cb627, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_dd4d493226df5e84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  94, 223,  38,  50,  73,  77, 221,
     35,   0,   0,   0,   2,   0,   0,   0,
     39, 182, 108, 197,  49, 209, 143, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80,  97, 114,  97,
    109, 115,  46,  80,  97, 114,  97, 109,
     68, 105, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111,   0,   0,   0,   0,   0,   0,
    114, 119,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd4d493226df5e84 = b_dd4d493226df5e84.words;
#if !CAPNP_LITE
static const uint16_t m_dd4d493226df5e84[] = {0, 1};
const ::capnp::_::RawSchema s_dd4d493226df5e84 = {
  0xdd4d493226df5e84, b_dd4d493226df5e84.words, 28, nullptr, m_dd4d493226df5e84,
  0, 2, nullptr, nullptr, nullptr, { &s_dd4d493226df5e84, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ParamDir_dd4d493226df5e84, dd4d493226df5e84);
static const ::capnp::_::AlignedData<66> b_9c32dec3dfda3812 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18,  56, 218, 223, 195, 222,  50, 156,
     35,   0,   0,   0,   1,   0,   1,   0,
     39, 182, 108, 197,  49, 209, 143, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80,  97, 114,  97,
    109, 115,  46,  80,  97, 114,  97, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     58,  54, 239,  27, 175,  71,  66, 241,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    132,  94, 223,  38,  50,  73,  77, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c32dec3dfda3812 = b_9c32dec3dfda3812.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c32dec3dfda3812[] = {
  &s_dd4d493226df5e84,
  &s_f14247af1bef363a,
};
static const uint16_t m_9c32dec3dfda3812[] = {2, 0, 1};
static const uint16_t i_9c32dec3dfda3812[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9c32dec3dfda3812 = {
  0x9c32dec3dfda3812, b_9c32dec3dfda3812.words, 66, d_9c32dec3dfda3812, m_9c32dec3dfda3812,
  2, 3, i_9c32dec3dfda3812, nullptr, nullptr, { &s_9c32dec3dfda3812, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d7e5ee34fd8f3862 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98,  56, 143, 253,  52, 238, 229, 215,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80,  97, 114,  97,
    109, 115,  46, 103, 101, 116,  80,  97,
    114,  97, 109,  76, 105, 115, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_d7e5ee34fd8f3862 = b_d7e5ee34fd8f3862.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d7e5ee34fd8f3862 = {
  0xd7e5ee34fd8f3862, b_d7e5ee34fd8f3862.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d7e5ee34fd8f3862, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_dc9ff9fb2db2c4d1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209, 196, 178,  45, 251, 249, 159, 220,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80,  97, 114,  97,
    109, 115,  46, 103, 101, 116,  80,  97,
    114,  97, 109,  76, 105, 115, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     18,  56, 218, 223, 195, 222,  50, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc9ff9fb2db2c4d1 = b_dc9ff9fb2db2c4d1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dc9ff9fb2db2c4d1[] = {
  &s_9c32dec3dfda3812,
};
static const uint16_t m_dc9ff9fb2db2c4d1[] = {0};
static const uint16_t i_dc9ff9fb2db2c4d1[] = {0};
const ::capnp::_::RawSchema s_dc9ff9fb2db2c4d1 = {
  0xdc9ff9fb2db2c4d1, b_dc9ff9fb2db2c4d1.words, 39, d_dc9ff9fb2db2c4d1, m_dc9ff9fb2db2c4d1,
  1, 1, i_dc9ff9fb2db2c4d1, nullptr, nullptr, { &s_dc9ff9fb2db2c4d1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_9d72a49ccb3ac4d0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208, 196,  58, 203, 156, 164, 114, 157,
     23,   0,   0,   0,   3,   0,   0,   0,
    164, 113, 131,  67,  32, 101, 162, 141,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  71,   0,   0,   0,
    101,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80, 105, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1, 180,  25,  26, 140, 175, 227, 218,
      9,   0,   0,   0,  58,   0,   0,   0,
    193, 135,  38, 233,  90, 221, 102, 218,
      5,   0,   0,   0,  34,   0,   0,   0,
     80, 105, 110,  68, 105, 114,   0,   0,
     80, 105, 110,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     66,  41,  20, 220, 104, 226, 169, 222,
     68,  11, 133,  66, 181, 211, 139, 235,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  80, 105, 110,  76, 105,
    115, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d72a49ccb3ac4d0 = b_9d72a49ccb3ac4d0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9d72a49ccb3ac4d0[] = {
  &s_8bef39bd9f14136b,
  &s_dea9e268dc142942,
  &s_eb8bd3b542850b44,
};
static const uint16_t m_9d72a49ccb3ac4d0[] = {0};
const ::capnp::_::RawSchema s_9d72a49ccb3ac4d0 = {
  0x9d72a49ccb3ac4d0, b_9d72a49ccb3ac4d0.words, 39, d_9d72a49ccb3ac4d0, m_9d72a49ccb3ac4d0,
  3, 1, nullptr, nullptr, nullptr, { &s_9d72a49ccb3ac4d0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_dae3af8c1a19b401 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 180,  25,  26, 140, 175, 227, 218,
     33,   0,   0,   0,   2,   0,   0,   0,
    208, 196,  58, 203, 156, 164, 114, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80, 105, 110, 115,
     46,  80, 105, 110,  68, 105, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,   0,   0,   0,   0,   0,   0,
    111, 117, 116,   0,   0,   0,   0,   0,
    105, 110, 111, 117, 116,   0,   0,   0, }
};
::capnp::word const* const bp_dae3af8c1a19b401 = b_dae3af8c1a19b401.words;
#if !CAPNP_LITE
static const uint16_t m_dae3af8c1a19b401[] = {0, 2, 1};
const ::capnp::_::RawSchema s_dae3af8c1a19b401 = {
  0xdae3af8c1a19b401, b_dae3af8c1a19b401.words, 31, nullptr, m_dae3af8c1a19b401,
  0, 3, nullptr, nullptr, nullptr, { &s_dae3af8c1a19b401, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(PinDir_dae3af8c1a19b401, dae3af8c1a19b401);
static const ::capnp::_::AlignedData<65> b_da66dd5ae92687c1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 135,  38, 233,  90, 221, 102, 218,
     33,   0,   0,   0,   1,   0,   1,   0,
    208, 196,  58, 203, 156, 164, 114, 157,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80, 105, 110, 115,
     46,  80, 105, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     58,  54, 239,  27, 175,  71,  66, 241,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      1, 180,  25,  26, 140, 175, 227, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da66dd5ae92687c1 = b_da66dd5ae92687c1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da66dd5ae92687c1[] = {
  &s_dae3af8c1a19b401,
  &s_f14247af1bef363a,
};
static const uint16_t m_da66dd5ae92687c1[] = {2, 0, 1};
static const uint16_t i_da66dd5ae92687c1[] = {0, 1, 2};
const ::capnp::_::RawSchema s_da66dd5ae92687c1 = {
  0xda66dd5ae92687c1, b_da66dd5ae92687c1.words, 65, d_da66dd5ae92687c1, m_da66dd5ae92687c1,
  2, 3, i_da66dd5ae92687c1, nullptr, nullptr, { &s_da66dd5ae92687c1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_dea9e268dc142942 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66,  41,  20, 220, 104, 226, 169, 222,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80, 105, 110, 115,
     46, 103, 101, 116,  80, 105, 110,  76,
    105, 115, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dea9e268dc142942 = b_dea9e268dc142942.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dea9e268dc142942 = {
  0xdea9e268dc142942, b_dea9e268dc142942.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dea9e268dc142942, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_eb8bd3b542850b44 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  11, 133,  66, 181, 211, 139, 235,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  67,
     77,  67, 116, 108,  80, 105, 110, 115,
     46, 103, 101, 116,  80, 105, 110,  76,
    105, 115, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112, 105, 110, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    193, 135,  38, 233,  90, 221, 102, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb8bd3b542850b44 = b_eb8bd3b542850b44.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eb8bd3b542850b44[] = {
  &s_da66dd5ae92687c1,
};
static const uint16_t m_eb8bd3b542850b44[] = {0};
static const uint16_t i_eb8bd3b542850b44[] = {0};
const ::capnp::_::RawSchema s_eb8bd3b542850b44 = {
  0xeb8bd3b542850b44, b_eb8bd3b542850b44.words, 39, d_eb8bd3b542850b44, m_eb8bd3b542850b44,
  1, 1, i_eb8bd3b542850b44, nullptr, nullptr, { &s_eb8bd3b542850b44, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<711> b_ed011cd96cd6be1e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
     23,   0,   0,   0,   3,   0,   0,   0,
    164, 113, 131,  67,  32, 101, 162, 141,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0, 183,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  71,  14,   0,   0,
    213,  10,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,   0,   0,   0,   0,
     44,   0,   0,   0,   1,   0,   1,   0,
    139, 240,  95, 210,  31,   6, 220, 234,
     81,   0,   0,   0,  90,   0,   0,   0,
    244, 214,  45, 109, 143, 176, 241, 189,
     81,   0,   0,   0, 114,   0,   0,   0,
    152, 235, 126,  73,  17, 124,  70, 167,
     81,   0,   0,   0,  74,   0,   0,   0,
    171,  56, 121, 131, 225, 240, 248, 168,
     81,   0,   0,   0,  74,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
     81,   0,   0,   0,  74,   0,   0,   0,
     47,  33, 179, 208,  60, 194, 162, 214,
     81,   0,   0,   0,  98,   0,   0,   0,
    131, 208,  75, 222,  18, 166, 193, 207,
     81,   0,   0,   0,  74,   0,   0,   0,
    149,  99,  75, 174, 209, 154, 139, 205,
     81,   0,   0,   0,  90,   0,   0,   0,
    204, 100, 182,  71,  99, 244,  13, 230,
     81,   0,   0,   0,  74,   0,   0,   0,
    177,  22,  36, 102, 187,  76, 178, 168,
     81,   0,   0,   0,  58,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
     77,   0,   0,   0,  50,   0,   0,   0,
     67, 121,  99, 108, 105,  99,  68,  97,
    116,  97,   0,   0,   0,   0,   0,   0,
     70, 101, 101, 100, 111, 112, 116,  83,
     97, 109, 112, 108, 101,   0,   0,   0,
     80, 111, 115, 105, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     65, 120, 105, 115,  77, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     65, 120, 105, 115,  77,  97, 115, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,  97,  99, 104, 105, 110, 101,  77,
    111, 100, 101,   0,   0,   0,   0,   0,
     80, 114, 111, 103, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     70, 101, 101, 100,  79, 112, 116,  67,
    102, 103,   0,   0,   0,   0,   0,   0,
     80, 105, 110,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  97, 109, 112, 108, 101,   0,   0,
     76, 105, 109, 105, 116,   0,   0,   0,
    228,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,  24,  70, 231, 241, 198, 217, 148,
    132,  29,  40,   5, 146,  58,  15, 208,
     17,   7,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   7,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    227, 231, 242,  28, 173, 136, 112, 186,
     86, 129,  33, 166,   0,  44,  13, 199,
    249,   6,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   6,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    190,  77,  74, 107, 114, 221, 110, 213,
     68, 169, 176, 248, 113,   1,  75, 201,
    225,   6,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   6,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     35, 252, 100, 223, 237, 215, 169, 170,
    228,  55,  55, 179,  62, 245,  52, 198,
    209,   6,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   6,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    226,  16, 158, 255, 212, 124, 193, 243,
     35,  54, 254, 188,  41,  94, 244, 171,
    189,   6,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   6,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     80, 138,  38, 240,   4, 102,  33, 251,
    172, 241,  63, 176, 238, 106, 148, 254,
    177,   6,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   6,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    146, 243, 226,  92, 217,  54,  89, 216,
     58, 182, 148,  35,  26, 227, 252, 131,
    165,   6,   0,   0, 202,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   6,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    209,  72, 120, 227, 218,   2, 137, 144,
    221, 255, 134,  32,  63,  34, 221, 248,
    153,   6,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   6,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    247, 140,  88,  15,  28, 219,  35, 138,
    170,  88,  67, 225, 119,  38,  38, 202,
    141,   6,   0,   0, 218,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   6,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    224, 152, 133, 177, 136, 194, 135, 157,
     14, 136, 238,  72, 183,  14, 192, 132,
    129,   6,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   6,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    140, 137, 149,  27,  92, 219,  16, 148,
     67, 221, 243,  29, 214, 220,   2, 213,
    105,   6,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   6,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    129,  12, 173,  85,  39, 183,  12, 186,
    193, 183, 231,  28,  87,  57, 219, 154,
     85,   6,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   6,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     67,  39, 142, 254, 198, 130,  61, 157,
     18, 169, 203,  10, 255, 101, 226, 175,
     65,   6,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   6,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    111,  97, 235, 244,  85, 191, 123, 209,
     87, 189, 202,  83,  46,   9,   2, 223,
     49,   6,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   6,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
    110, 125,  25,  80, 171,  35, 208, 154,
     32,  63,  31,  70, 212, 202, 135, 229,
     33,   6,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   6,   0,   0,   7,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    198, 204,   7, 218, 107, 206, 229, 129,
     85, 220, 217,  58, 195, 164, 142, 254,
     17,   6,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   6,   0,   0,   7,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136, 147,  66,  71, 217, 247, 105, 156,
    174,  12, 104, 174,  67, 109, 228, 201,
    253,   5,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   5,   0,   0,   7,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
     83, 138, 218, 196,  49, 126, 244, 204,
     71, 178,  26, 225, 201, 166, 214, 222,
    237,   5,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   5,   0,   0,   7,   0,   0,   0,
     19,   0,   0,   0,   0,   0,   0,   0,
    204, 231, 213, 147,  79, 113,  68, 218,
    195,  37,  63,   3, 150, 205, 156, 215,
    213,   5,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   5,   0,   0,   7,   0,   0,   0,
     20,   0,   0,   0,   0,   0,   0,   0,
     17, 149, 109, 185,  31, 195, 198, 237,
    127, 106, 183, 143, 186, 251,  50, 186,
    189,   5,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   5,   0,   0,   7,   0,   0,   0,
     21,   0,   0,   0,   0,   0,   0,   0,
    133, 204, 238,  87, 254, 227, 140, 136,
    226, 112, 212, 218, 207, 169, 137, 149,
    165,   5,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   5,   0,   0,   7,   0,   0,   0,
     22,   0,   0,   0,   0,   0,   0,   0,
    111, 244, 163,  70, 131,  67, 229, 160,
    104, 183,  27,  43, 249, 188, 213, 213,
    145,   5,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   5,   0,   0,   7,   0,   0,   0,
     23,   0,   0,   0,   0,   0,   0,   0,
    183, 140, 115, 209,  49, 169, 196, 229,
     62, 168, 219, 101,  15, 218,  76, 227,
    125,   5,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   5,   0,   0,   7,   0,   0,   0,
     24,   0,   0,   0,   0,   0,   0,   0,
    146, 203,  92,  98,  96,  87, 220, 151,
     82, 174, 110,  61,  50,   2,   1, 166,
    105,   5,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   5,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,   0,   0,   0,   0,
    212, 149, 181, 120, 225,  11, 164, 142,
    138,  40, 219,  57, 193,  53,  76, 189,
     85,   5,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   5,   0,   0,   7,   0,   0,   0,
     26,   0,   0,   0,   0,   0,   0,   0,
     59, 181,  10,  95, 254, 247, 245, 134,
    242, 147, 138, 105, 131, 190,  56, 174,
     65,   5,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   5,   0,   0,   7,   0,   0,   0,
     27,   0,   0,   0,   0,   0,   0,   0,
    128, 181,  64, 125, 158, 218,  75, 204,
      5,  79,  32, 190,  90,  35, 136, 175,
     45,   5,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   5,   0,   0,   7,   0,   0,   0,
     28,   0,   0,   0,   0,   0,   0,   0,
    145, 179, 223, 204,  67, 146,  29, 169,
     42, 179,  37, 180,  18, 228, 202, 136,
     25,   5,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   5,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,   0,   0,   0,   0,
    186, 245, 235, 232,  65,  28,  95, 180,
     16, 209, 167,  65,  94, 126, 104, 252,
      5,   5,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   4,   0,   0,   7,   0,   0,   0,
     30,   0,   0,   0,   0,   0,   0,   0,
     34,  26, 147, 232, 180, 100, 212, 197,
    251, 252,  71,  41, 218, 146,  84, 219,
    237,   4,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   4,   0,   0,   7,   0,   0,   0,
     31,   0,   0,   0,   0,   0,   0,   0,
     87, 215, 102, 218,  13, 156,  45, 201,
     51, 176, 118, 105,  90,  69, 106, 209,
    213,   4,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   4,   0,   0,   7,   0,   0,   0,
     32,   0,   0,   0,   0,   0,   0,   0,
    155,  38, 249,   9,  64, 146, 110, 188,
     38, 207, 113,  87, 161,  25, 254, 249,
    193,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   4,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,   0,   0,   0,   0,
     59, 252, 182, 211, 254, 210, 128, 185,
    144, 231, 255, 154,  52,   1, 221, 226,
    173,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   4,   0,   0,   7,   0,   0,   0,
     34,   0,   0,   0,   0,   0,   0,   0,
     53, 129, 105, 109, 157,  39, 175, 203,
    250,   1,  66, 170, 213,  46, 255, 180,
    153,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   4,   0,   0,   7,   0,   0,   0,
     35,   0,   0,   0,   0,   0,   0,   0,
    255, 148,  62, 190, 129,  46,  76, 216,
    228, 188, 147, 232,  28, 195,  97, 168,
    133,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   4,   0,   0,   7,   0,   0,   0,
     36,   0,   0,   0,   0,   0,   0,   0,
    255, 177, 157,  37, 163, 124,  49, 242,
    152, 201, 233, 179, 189, 197,  13, 252,
    113,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   4,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,   0,   0,   0,   0,
    182,  58,  68,   2, 224,  76, 202, 156,
    231,  16,  18, 241, 100, 119,   7, 228,
     97,   4,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   4,   0,   0,   7,   0,   0,   0,
     38,   0,   0,   0,   0,   0,   0,   0,
     86, 146, 153,  27,  94, 212, 183, 148,
    229, 225, 185, 229,  17, 236, 133, 208,
     77,   4,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   4,   0,   0,   7,   0,   0,   0,
     39,   0,   0,   0,   0,   0,   0,   0,
    184, 126, 167,  70, 169, 242, 205, 223,
     77, 221,  23, 188, 176,   9,  50, 200,
     53,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   4,   0,   0,   7,   0,   0,   0,
     40,   0,   0,   0,   0,   0,   0,   0,
     13, 137,  48,  76, 101,  45, 230, 225,
     48,  61, 251,   2, 138,  63, 225, 236,
     37,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   4,   0,   0,   7,   0,   0,   0,
     41,   0,   0,   0,   0,   0,   0,   0,
    229,  20, 205, 170, 136,  21, 216, 146,
      5, 155, 150,  54, 149,  34, 105, 168,
     21,   4,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   4,   0,   0,   7,   0,   0,   0,
     42,   0,   0,   0,   0,   0,   0,   0,
     99,  88, 252, 159, 231,  57,  36, 133,
     29, 165,  21,  74, 111, 226, 101, 174,
      5,   4,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   4,   0,   0,   7,   0,   0,   0,
     43,   0,   0,   0,   0,   0,   0,   0,
     98, 183,  28, 240, 250, 133,  70, 188,
    232,   9,  96, 207,  53, 228, 143, 214,
    245,   3,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   3,   0,   0,   7,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   0,   0,
    119, 128, 199,   3, 231,  70, 215, 190,
     32,  19,  38,  93, 157, 188, 170, 153,
    229,   3,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   3,   0,   0,   7,   0,   0,   0,
     45,   0,   0,   0,   0,   0,   0,   0,
     98,  70, 238, 201,  42, 119, 182, 218,
    235, 151, 176, 198, 106, 130,  12, 228,
    209,   3,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   3,   0,   0,   7,   0,   0,   0,
     46,   0,   0,   0,   0,   0,   0,   0,
    254, 204, 119, 166, 222,  52, 231, 232,
     87,  93, 213,  87, 175,  65, 152, 163,
    189,   3,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   3,   0,   0,   7,   0,   0,   0,
     47,   0,   0,   0,   0,   0,   0,   0,
     83, 142,  76, 241,  12,  16,  11, 190,
    241, 202,  74, 126, 226, 226,  50, 218,
    169,   3,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   3,   0,   0,   7,   0,   0,   0,
     48,   0,   0,   0,   0,   0,   0,   0,
    230,  14, 253, 173, 214,  64,  64, 252,
      8,  25,  24, 233,  61, 110,  72, 228,
    149,   3,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   3,   0,   0,   7,   0,   0,   0,
     49,   0,   0,   0,   0,   0,   0,   0,
     25, 239, 251,   6, 171, 251,  71, 179,
     87, 247,  54,  14, 170,  46,  13, 134,
    129,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   3,   0,   0,   7,   0,   0,   0,
     50,   0,   0,   0,   0,   0,   0,   0,
    141, 246, 251, 204, 117, 244, 164, 151,
    194,  31, 240, 194,  24, 235,  37, 203,
    109,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   3,   0,   0,   7,   0,   0,   0,
     51,   0,   0,   0,   0,   0,   0,   0,
    104, 162, 188,  31, 168, 171, 132, 171,
     85,  25, 190,  73,  67, 233, 215, 186,
     89,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   3,   0,   0,   7,   0,   0,   0,
     52,   0,   0,   0,   0,   0,   0,   0,
     10, 212,  26,  11, 202,  59,  51, 206,
    119, 218,  27,  55, 194, 253, 249, 171,
     69,   3,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   3,   0,   0,   7,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     49, 184,  46,  77, 210, 149,  65, 172,
    251, 214,  89, 223, 111, 123, 200, 136,
     53,   3,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   3,   0,   0,   7,   0,   0,   0,
     53,   0,   0,   0,   0,   0,   0,   0,
    113,  78, 216, 184, 146, 156,  67, 132,
    120,  55, 213, 118,  77,  75,  45, 215,
     37,   3,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   3,   0,   0,   7,   0,   0,   0,
     54,   0,   0,   0,   0,   0,   0,   0,
    108, 104, 144, 100, 232, 225, 199, 212,
     11, 218,  74, 164, 176, 149, 246, 182,
     17,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   3,   0,   0,   7,   0,   0,   0,
     55,   0,   0,   0,   0,   0,   0,   0,
    137, 132,  75,  75, 148, 241,  23, 167,
     33, 212, 169, 160,  36,  42,  52, 236,
    253,   2,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   2,   0,   0,   7,   0,   0,   0,
     56,   0,   0,   0,   0,   0,   0,   0,
     49, 253,  84, 198,  26,  65,   1, 229,
    169, 110, 130, 111, 161, 156, 217, 137,
    233,   2,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   2,   0,   0,   7,   0,   0,   0,
    100, 117, 109, 109, 121,  48,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 117, 109, 109, 121,  49,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 101, 101, 100, 111,
    112, 116,  67, 111, 109, 109, 105, 116,
     67, 102, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  67, 121,  99, 108, 105,
     99,  68,  97, 116,  97,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76,  99,  99, 116,  83,
    101, 116,  77,  97,  99, 104, 105, 110,
    101,  77, 111, 100, 101,  72, 111, 109,
    105, 110, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76,  99,  99, 116,  83,
    101, 116,  77,  97,  99, 104, 105, 110,
    101,  77, 111, 100, 101,  83, 116, 114,
    101,  97, 109,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76,  99,  99, 116,  83,
    101, 116,  77,  97,  99, 104, 105, 110,
    101,  77, 111, 100, 101,  74, 111, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76,  99,  99, 116,  83,
    101, 116,  77,  97,  99, 104, 105, 110,
    101,  77, 111, 100, 101,  73, 110,  97,
     99, 116, 105, 118, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76,  99,  99, 116,  83,
    101, 116,  77,  97,  99, 104, 105, 110,
    101,  77, 111, 100, 101,  71,  67, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 117, 109, 109, 121,  57,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 116,  97, 114, 116,
     72, 111, 109, 105, 110, 103,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 116, 111, 112,  72,
    111, 109, 105, 110, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  72, 111, 109, 101,  80,
    111, 115, 105, 116, 105, 111, 110,  88,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  72, 111, 109, 101,  80,
    111, 115, 105, 116, 105, 111, 110,  89,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  72, 111, 109, 101,  80,
    111, 115, 105, 116, 105, 111, 110,  90,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 112, 101, 101, 100,
     83, 112, 105, 110, 100, 108, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  65,  99, 116, 105, 118,
    101,  83, 112, 105, 110, 100, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  74, 111, 103,  88,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  74, 111, 103,  89,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  74, 111, 103,  90,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  82, 101, 108,  74, 111,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  80, 108, 117, 115,  74,
    111, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  77, 105, 110, 117, 115,
     74, 111, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  65,  98, 115,  74, 111,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  71, 111,  74, 111, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 112, 101, 101, 100,
     74, 111, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 116, 111, 112,  74,
    111, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  79, 102, 102, 115, 101,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 117, 109, 109, 121,  50,  56,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 117, 109, 109, 121,  50,  57,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 116,  97, 114, 116,
     83, 116, 114, 101,  97, 109,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 116, 111, 112,  83,
    116, 114, 101,  97, 109,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  71,  99, 111, 100, 101,
     83, 116,  97, 114, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  71,  99, 111, 100, 101,
     80,  97, 117, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70,  97, 117, 108, 116,
     82, 101, 115, 101, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 101, 101, 100, 114,
     97, 116, 101,  83,  99,  97, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 101, 101, 100, 111,
    112, 116,  82, 101, 115, 101, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97, 100,  76, 111, 103,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 101, 101, 100, 111,
    112, 116,  67, 111, 110, 102, 105, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  70, 101, 101, 100, 111,
    112, 116,  67, 111, 110, 102, 105, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 111, 111, 108, 112,  97, 116, 104,
     83, 116,  97, 114, 116,  67, 104,  97,
    110, 110, 101, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 111, 111, 108, 112,  97, 116, 104,
     83, 116, 111, 112,  67, 104,  97, 110,
    110, 101, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 111, 111, 108, 112,  97, 116, 104,
     82, 101,  97, 100,  83,  97, 109, 112,
    108, 101, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 110, 100,  70, 105, 108, 101,
     80,  97, 114,  97, 109,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 110, 100,  70, 105, 108, 101,
     68,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112,  97, 116, 104,  69, 120, 105, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  70, 111,
    108, 100, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  76, 111,  97, 100,  83,
    116, 114, 101,  97, 109,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  80,  97, 117, 115, 101,
     83, 116, 114, 101,  97, 109,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115,  97, 109, 112, 108, 101, 114,  78,
    101, 119,  70, 105, 108, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  70, 105, 108, 101,  68,
     97, 116,  97,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83,  97, 109, 112, 108,
    101, 114,  68, 111, 119, 110, 108, 111,
     97, 100,  70, 105, 108, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 112, 105, 110, 100,
    108, 101,  84, 104, 114, 101, 115, 104,
    111, 108, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116,  97, 114, 116,  74, 111, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 114, 101, 101,  84,
    111, 111, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70, 114, 101, 101,  80,
     97, 108, 101, 116, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  77,  97,  99, 104, 105,
    110, 101,  76, 105, 109, 105, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   1,   0,
    107,  19,  20, 159, 189,  57, 239, 139,
      0,   0,   0,   0,   0,   0,   0,   0,
    208, 196,  58, 203, 156, 164, 114, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
     39, 182, 108, 197,  49, 209, 143, 218,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed011cd96cd6be1e = b_ed011cd96cd6be1e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ed011cd96cd6be1e[] = {
  &s_81e5ce6bda07ccc6,
  &s_83fce31a2394b63a,
  &s_84439c92b8d84e71,
  &s_84c00eb748ee880e,
  &s_852439e79ffc5863,
  &s_860d2eaa0e36f757,
  &s_86f5f7fe5f0ab53b,
  &s_888ce3fe57eecc85,
  &s_88c87b6fdf59d6fb,
  &s_88cae412b425b32a,
  &s_89d99ca16f826ea9,
  &s_8a23db1c0f588cf7,
  &s_8bef39bd9f14136b,
  &s_8ea40be178b595d4,
  &s_908902dae37848d1,
  &s_92d81588aacd14e5,
  &s_9410db5c1b95898c,
  &s_94b7d45e1b999256,
  &s_94d9c6f1e746180c,
  &s_9589a9cfdad470e2,
  &s_97a4f475ccfbf68d,
  &s_97dc5760625ccb92,
  &s_99aabc9d5d261320,
  &s_9ad023ab50197d6e,
  &s_9adb39571ce7b7c1,
  &s_9c69f7d947429388,
  &s_9cca4ce002443ab6,
  &s_9d3d82c6fe8e2743,
  &s_9d72a49ccb3ac4d0,
  &s_9d87c288b18598e0,
  &s_a0e5438346a3f46f,
  &s_a39841af57d55d57,
  &s_a60102323d6eae52,
  &s_a717f1944b4b8489,
  &s_a861c31ce893bce4,
  &s_a869229536969b05,
  &s_a91d9243ccdfb391,
  &s_aaa9d7eddf64fc23,
  &s_ab84aba81fbca268,
  &s_abf45e29bcfe3623,
  &s_abf9fdc2371bda77,
  &s_ac4195d24d2eb831,
  &s_ae38be83698a93f2,
  &s_ae65e26f4a15a51d,
  &s_af88235abe204f05,
  &s_afe265ff0acba912,
  &s_b347fbab06fbef19,
  &s_b45f1c41e8ebf5ba,
  &s_b4ff2ed5aa4201fa,
  &s_b6f695b0a44ada0b,
  &s_b980d2fed3b6fc3b,
  &s_ba0cb72755ad0c81,
  &s_ba32fbba8fb76a7f,
  &s_ba7088ad1cf2e7e3,
  &s_bad7e94349be1955,
  &s_bc4685faf01cb762,
  &s_bc6e924009f9269b,
  &s_bd4c35c139db288a,
  &s_be0b100cf14c8e53,
  &s_bed746e703c78077,
  &s_c5d464b4e8931a22,
  &s_c634f53eb33737e4,
  &s_c70d2c00a6218156,
  &s_c83209b0bc17dd4d,
  &s_c92d9c0dda66d757,
  &s_c94b0171f8b0a944,
  &s_c9e46d43ae680cae,
  &s_ca262677e14358aa,
  &s_cb25eb18c2f01fc2,
  &s_cbaf279d6d698135,
  &s_cc4bda9e7d40b580,
  &s_ccf47e31c4da8a53,
  &s_ce333bca0b1ad40a,
  &s_d00f3a9205281d84,
  &s_d085ec11e5b9e1e5,
  &s_d16a455a6976b033,
  &s_d17bbf55f4eb616f,
  &s_d4c7e1e86490686c,
  &s_d502dcd61df3dd43,
  &s_d56edd726b4a4dbe,
  &s_d5d5bcf92b1bb768,
  &s_d68fe435cf6009e8,
  &s_d72d4b4d76d53778,
  &s_d79ccd96033f25c3,
  &s_d84c2e81be3e94ff,
  &s_d85936d95ce2f392,
  &s_da32e2e27e4acaf1,
  &s_da44714f93d5e7cc,
  &s_da8fd131c56cb627,
  &s_dab6772ac9ee4662,
  &s_db5492da2947fcfb,
  &s_ded6a6c9e11ab247,
  &s_df02092e53cabd57,
  &s_dfcdf2a946a77eb8,
  &s_e1e62d654c30890d,
  &s_e2dd01349affe790,
  &s_e34cda0f65dba83e,
  &s_e4077764f11210e7,
  &s_e40c826ac6b097eb,
  &s_e4486e3de9181908,
  &s_e501411ac654fd31,
  &s_e587cad4461f3f20,
  &s_e5c4a931d1738cb7,
  &s_e8e734dea677ccfe,
  &s_ec342a24a0a9d421,
  &s_ece13f8a02fb3d30,
  &s_edc6c31fb96d9511,
  &s_f2317ca3259db1ff,
  &s_f3c17cd4ff9e10e2,
  &s_f8dd223f2086ffdd,
  &s_f9fe19a15771cf26,
  &s_fb216604f0268a50,
  &s_fc0dc5bdb3e9c998,
  &s_fc4040d6adfd0ee6,
  &s_fc687e5e41a7d110,
  &s_fe8ea4c33ad9dc55,
  &s_fe946aeeb03ff1ac,
};
static const uint16_t m_ed011cd96cd6be1e[] = {46, 0, 1, 28, 29, 9, 3, 39, 50, 56, 45, 37, 49, 44, 43, 23, 16, 34, 2, 38, 36, 35, 55, 54, 33, 32, 24, 12, 13, 14, 17, 18, 19, 8, 4, 7, 6, 5, 47, 22, 27, 48, 21, 20, 51, 25, 15, 52, 10, 30, 11, 26, 31, 53, 42, 40, 41};
const ::capnp::_::RawSchema s_ed011cd96cd6be1e = {
  0xed011cd96cd6be1e, b_ed011cd96cd6be1e.words, 711, d_ed011cd96cd6be1e, m_ed011cd96cd6be1e,
  117, 57, nullptr, nullptr, nullptr, { &s_ed011cd96cd6be1e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<358> b_eadc061fd25ff08b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139, 240,  95, 210,  31,   6, 220, 234,
     45,   0,   0,   0,   1,   0,   5,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 159,   4,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  67, 121,  99,
    108, 105,  99,  68,  97, 116,  97,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     84,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   2,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   2,   0,   0,   3,   0,   1,   0,
     72,   2,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   2,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   2,   0,   0,   3,   0,   1,   0,
     84,   2,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   2,   0,   0,   3,   0,   1,   0,
     92,   2,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  96,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   2,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   2,   0,   0,   3,   0,   1,   0,
    100,   2,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,  97,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   2,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   2,   0,   0,   3,   0,   1,   0,
    108,   2,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   2,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   2,   0,   0,   3,   0,   1,   0,
    116,   2,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,  99,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   2,   0,   0,   3,   0,   1,   0,
    124,   2,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0, 100,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   2,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   2,   0,   0,   3,   0,   1,   0,
    132,   2,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0, 101,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   2,   0,   0,   3,   0,   1,   0,
    140,   2,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   2,   0,   0,   3,   0,   1,   0,
    148,   2,   0,   0,   2,   0,   1,   0,
     10,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   2,   0,   0,   3,   0,   1,   0,
    156,   2,   0,   0,   2,   0,   1,   0,
     11,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   2,   0,   0,   3,   0,   1,   0,
    164,   2,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0, 102,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   2,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   2,   0,   0,   3,   0,   1,   0,
    168,   2,   0,   0,   2,   0,   1,   0,
     13,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   1,   0,  13,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   2,   0,   0,   3,   0,   1,   0,
    176,   2,   0,   0,   2,   0,   1,   0,
     14,   0,   0,   0, 104,   0,   0,   0,
      0,   0,   1,   0,  14,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   2,   0,   0,   3,   0,   1,   0,
    184,   2,   0,   0,   2,   0,   1,   0,
     15,   0,   0,   0, 105,   0,   0,   0,
      0,   0,   1,   0,  15,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   2,   0,   0,   3,   0,   1,   0,
    192,   2,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,  16,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   2,   0,   0,   3,   0,   1,   0,
    200,   2,   0,   0,   2,   0,   1,   0,
     17,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,  17,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   2,   0,   0,   3,   0,   1,   0,
    208,   2,   0,   0,   2,   0,   1,   0,
     18,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   2,   0,   0,   3,   0,   1,   0,
    216,   2,   0,   0,   2,   0,   1,   0,
     19,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,  19,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   2,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   2,   0,   0,   3,   0,   1,   0,
    228,   2,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   9,   0,   0,   0,
      0,   0,   1,   0,  20,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   2,   0,   0,   3,   0,   1,   0,
    236,   2,   0,   0,   2,   0,   1,   0,
    102, 101, 101, 100, 111, 112, 116,  83,
    116, 101, 112,  68, 116,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  81,
    117, 101, 117, 101,  83, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  80,
    114, 111, 103, 114, 101, 115, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    131, 208,  75, 222,  18, 166, 193, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 109, 105, 110, 103,  70, 105,
    110, 105, 115, 104, 101, 100,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  70, 105,
    110, 105, 115, 104, 101, 100,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  82, 117,
    110, 110, 105, 110, 103,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 111, 103,  70, 105, 110, 105, 115,
    104, 101, 100,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  99, 111, 100, 101,  70, 105, 110,
    105, 115, 104, 101, 100,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  99, 111, 100, 101,  82, 117, 110,
    110, 105, 110, 103,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 114, 114, 101, 110, 116,  80,
    111, 115, 105, 116, 105, 111, 110,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    152, 235, 126,  73,  17, 124,  70, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112, 105, 110, 100, 108, 101,  86,
    101, 108, 111,  99, 105, 116, 121,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 120, 105, 115,  77, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    171,  56, 121, 131, 225, 240, 248, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 109, 101, 100,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  85,
    115,  65,  99, 116, 105, 118, 101,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  82,
    116,  65,  99, 116, 105, 118, 101,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  82,
    101,  97, 100, 121,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109, 101, 114,
     70,  73,  70,  79,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97,  99, 104, 105, 110, 101,  77,
    111, 100, 101,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     47,  33, 179, 208,  60, 194, 162, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 101, 101, 100, 111, 112, 116,  81,
    117, 101, 117, 101,  77,  97, 120,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 114, 114, 101, 110, 116,  71,
     67, 111, 100, 101,  76, 105, 110, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97,  99, 104, 105, 110, 101,  83,
    116,  97, 116, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eadc061fd25ff08b = b_eadc061fd25ff08b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eadc061fd25ff08b[] = {
  &s_a7467c11497eeb98,
  &s_a8f8f0e1837938ab,
  &s_cfc1a612de4bd083,
  &s_d6a2c23cd0b3212f,
};
static const uint16_t m_eadc061fd25ff08b[] = {11, 19, 9, 2, 18, 1, 15, 14, 0, 13, 7, 8, 12, 3, 6, 17, 20, 10, 4, 5, 16};
static const uint16_t i_eadc061fd25ff08b[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
const ::capnp::_::RawSchema s_eadc061fd25ff08b = {
  0xeadc061fd25ff08b, b_eadc061fd25ff08b.words, 358, d_eadc061fd25ff08b, m_eadc061fd25ff08b,
  4, 21, i_eadc061fd25ff08b, nullptr, nullptr, { &s_eadc061fd25ff08b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_bdf1b08f6d2dd6f4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    244, 214,  45, 109, 143, 176, 241, 189,
     45,   0,   0,   0,   1,   0,   3,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  70, 101, 101,
    100, 111, 112, 116,  83,  97, 109, 112,
    108, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bdf1b08f6d2dd6f4 = b_bdf1b08f6d2dd6f4.words;
#if !CAPNP_LITE
static const uint16_t m_bdf1b08f6d2dd6f4[] = {0, 1, 2};
static const uint16_t i_bdf1b08f6d2dd6f4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_bdf1b08f6d2dd6f4 = {
  0xbdf1b08f6d2dd6f4, b_bdf1b08f6d2dd6f4.words, 67, nullptr, m_bdf1b08f6d2dd6f4,
  0, 3, i_bdf1b08f6d2dd6f4, nullptr, nullptr, { &s_bdf1b08f6d2dd6f4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<96> b_a7467c11497eeb98 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152, 235, 126,  73,  17, 124,  70, 167,
     45,   0,   0,   0,   1,   0,   5,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  80, 111, 115,
    105, 116, 105, 111, 110,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a7467c11497eeb98 = b_a7467c11497eeb98.words;
#if !CAPNP_LITE
static const uint16_t m_a7467c11497eeb98[] = {3, 4, 0, 1, 2};
static const uint16_t i_a7467c11497eeb98[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_a7467c11497eeb98 = {
  0xa7467c11497eeb98, b_a7467c11497eeb98.words, 96, nullptr, m_a7467c11497eeb98,
  0, 5, i_a7467c11497eeb98, nullptr, nullptr, { &s_a7467c11497eeb98, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<97> b_a8f8f0e1837938ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171,  56, 121, 131, 225, 240, 248, 168,
     45,   0,   0,   0,   1,   0,   0,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      5,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  65, 120, 105,
    115,  77, 111, 100, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
    105, 110,  97,  99, 116, 105, 118, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  97, 117, 108, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 109, 105, 110, 103,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 115, 112,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 115, 118,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8f8f0e1837938ab = b_a8f8f0e1837938ab.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8f8f0e1837938ab[] = {
  &s_fddd767e2bb4e523,
};
static const uint16_t m_a8f8f0e1837938ab[] = {3, 4, 1, 2, 0};
static const uint16_t i_a8f8f0e1837938ab[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_a8f8f0e1837938ab = {
  0xa8f8f0e1837938ab, b_a8f8f0e1837938ab.words, 97, d_a8f8f0e1837938ab, m_a8f8f0e1837938ab,
  1, 5, i_a8f8f0e1837938ab, nullptr, nullptr, { &s_a8f8f0e1837938ab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<111> b_fddd767e2bb4e523 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35, 229, 180,  43, 126, 118, 221, 253,
     45,   0,   0,   0,   1,   0,   1,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  65, 120, 105,
    115,  77,  97, 115, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112, 105, 110, 100, 108, 101,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fddd767e2bb4e523 = b_fddd767e2bb4e523.words;
#if !CAPNP_LITE
static const uint16_t m_fddd767e2bb4e523[] = {3, 4, 5, 0, 1, 2};
static const uint16_t i_fddd767e2bb4e523[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_fddd767e2bb4e523 = {
  0xfddd767e2bb4e523, b_fddd767e2bb4e523.words, 111, nullptr, m_fddd767e2bb4e523,
  0, 6, i_fddd767e2bb4e523, nullptr, nullptr, { &s_fddd767e2bb4e523, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<98> b_d6a2c23cd0b3212f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47,  33, 179, 208,  60, 194, 162, 214,
     45,   0,   0,   0,   1,   0,   1,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  77,  97,  99,
    104, 105, 110, 101,  77, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
    104, 111, 109, 105, 110, 103,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 111, 103,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  97,  99, 116, 105, 118, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,  99, 111, 100, 101,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6a2c23cd0b3212f = b_d6a2c23cd0b3212f.words;
#if !CAPNP_LITE
static const uint16_t m_d6a2c23cd0b3212f[] = {4, 0, 3, 2, 1};
static const uint16_t i_d6a2c23cd0b3212f[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_d6a2c23cd0b3212f = {
  0xd6a2c23cd0b3212f, b_d6a2c23cd0b3212f.words, 98, nullptr, m_d6a2c23cd0b3212f,
  0, 5, i_d6a2c23cd0b3212f, nullptr, nullptr, { &s_d6a2c23cd0b3212f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<187> b_cfc1a612de4bd083 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 208,  75, 222,  18, 166, 193, 207,
     45,   0,   0,   0,   1,   0,   5,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  55,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  80, 114, 111,
    103, 114, 101, 115, 115,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     40,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   1,   0,   0,   3,   0,   1,   0,
     48,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   1,   0,   0,   3,   0,   1,   0,
     56,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   1,   0,   0,   3,   0,   1,   0,
     68,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   1,   0,   0,   3,   0,   1,   0,
     76,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   1,   0,   0,   3,   0,   1,   0,
     88,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   1,   0,   0,   3,   0,   1,   0,
     96,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   1,   0,   0,   3,   0,   1,   0,
    108,   1,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,   9,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   1,   0,   0,   3,   0,   1,   0,
    116,   1,   0,   0,   2,   0,   1,   0,
     99, 111, 109, 112, 114, 101, 115, 115,
    105, 110, 103,  80, 114, 111, 103, 114,
    101, 115, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112, 114, 101, 115, 115,
    105, 110, 103,  67, 111, 117, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 109, 111, 111, 116, 104, 105, 110,
    103,  80, 114, 111, 103, 114, 101, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 109, 111, 111, 116, 104, 105, 110,
    103,  67, 111, 117, 110, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112, 108, 105, 116, 116, 105, 110,
    103,  80, 114, 111, 103, 114, 101, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112, 108, 105, 116, 116, 105, 110,
    103,  67, 111, 117, 110, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 116, 105, 109, 105, 115, 105,
    110, 103,  80, 114, 111, 103, 114, 101,
    115, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 116, 105, 109, 105, 115, 105,
    110, 103,  67, 111, 117, 110, 116,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115,  97, 109, 112, 108, 105,
    110, 103,  80, 114, 111, 103, 114, 101,
    115, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115,  97, 109, 112, 108, 105,
    110, 103,  67, 111, 117, 110, 116,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfc1a612de4bd083 = b_cfc1a612de4bd083.words;
#if !CAPNP_LITE
static const uint16_t m_cfc1a612de4bd083[] = {1, 0, 7, 6, 9, 8, 3, 2, 5, 4};
static const uint16_t i_cfc1a612de4bd083[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
const ::capnp::_::RawSchema s_cfc1a612de4bd083 = {
  0xcfc1a612de4bd083, b_cfc1a612de4bd083.words, 187, nullptr, m_cfc1a612de4bd083,
  0, 10, i_cfc1a612de4bd083, nullptr, nullptr, { &s_cfc1a612de4bd083, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<232> b_cd8b9ad1ae4b6395 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    149,  99,  75, 174, 209, 154, 139, 205,
     45,   0,   0,   0,   1,   0,  11,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  23,   3,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  70, 101, 101,
    100,  79, 112, 116,  67, 102, 103,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     56,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   1,   0,   0,   3,   0,   1,   0,
    128,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   1,   0,   0,   3,   0,   1,   0,
    132,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   1,   0,   0,   3,   0,   1,   0,
    136,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   1,   0,   0,   3,   0,   1,   0,
    140,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   1,   0,   0,   3,   0,   1,   0,
    144,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,  96,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   1,   0,   0,   3,   0,   1,   0,
    152,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   1,   0,   0,   3,   0,   1,   0,
    156,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   1,   0,   0,   3,   0,   1,   0,
    160,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   1,   0,   0,   3,   0,   1,   0,
    164,   1,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   1,   0,   0,   3,   0,   1,   0,
    168,   1,   0,   0,   2,   0,   1,   0,
     10,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   1,   0,   0,   3,   0,   1,   0,
    172,   1,   0,   0,   2,   0,   1,   0,
     11,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   1,   0,   0,   3,   0,   1,   0,
    176,   1,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   9,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   1,   0,   0,   3,   0,   1,   0,
    180,   1,   0,   0,   2,   0,   1,   0,
     13,   0,   0,   0,  10,   0,   0,   0,
      0,   0,   1,   0,  13,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   1,   0,   0,   3,   0,   1,   0,
    184,   1,   0,   0,   2,   0,   1,   0,
    110,  72, 111, 114, 122,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  68, 105, 115,  99, 114,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  66, 114, 101,  97, 107,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  83, 112, 108, 105, 116,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 116,  79, 102, 102,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101,  98, 117, 103,  80, 114, 105,
    110, 116,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 117, 114,  99, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 109,  97, 120,  88,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 109,  97, 120,  89,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 109,  97, 120,  90,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 109,  97, 120,  88,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 109,  97, 120,  89,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 109,  97, 120,  90,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 109,  97, 120,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd8b9ad1ae4b6395 = b_cd8b9ad1ae4b6395.words;
#if !CAPNP_LITE
static const uint16_t m_cd8b9ad1ae4b6395[] = {7, 8, 9, 4, 5, 10, 11, 12, 3, 2, 1, 0, 6, 13};
static const uint16_t i_cd8b9ad1ae4b6395[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
const ::capnp::_::RawSchema s_cd8b9ad1ae4b6395 = {
  0xcd8b9ad1ae4b6395, b_cd8b9ad1ae4b6395.words, 232, nullptr, m_cd8b9ad1ae4b6395,
  0, 14, i_cd8b9ad1ae4b6395, nullptr, nullptr, { &s_cd8b9ad1ae4b6395, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_e60df46347b664cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 100, 182,  71,  99, 244,  13, 230,
     45,   0,   0,   0,   1,   0,   2,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  80, 105, 110,
     86,  97, 108, 117, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    193, 124, 140,   0, 249, 210, 253, 251,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0, }
};
::capnp::word const* const bp_e60df46347b664cc = b_e60df46347b664cc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e60df46347b664cc[] = {
  &s_fbfdd2f9008c7cc1,
};
static const uint16_t m_e60df46347b664cc[] = {0};
static const uint16_t i_e60df46347b664cc[] = {0};
const ::capnp::_::RawSchema s_e60df46347b664cc = {
  0xe60df46347b664cc, b_e60df46347b664cc.words, 29, d_e60df46347b664cc, m_e60df46347b664cc,
  1, 1, i_e60df46347b664cc, nullptr, nullptr, { &s_e60df46347b664cc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_fbfdd2f9008c7cc1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 124, 140,   0, 249, 210, 253, 251,
     54,   0,   0,   0,   1,   0,   2,   0,
    204, 100, 182,  71,  99, 244,  13, 230,
      0,   0,   7,   0,   1,   0,   4,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  80, 105, 110,
     86,  97, 108, 117, 101,  46, 118,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    117,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbfdd2f9008c7cc1 = b_fbfdd2f9008c7cc1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fbfdd2f9008c7cc1[] = {
  &s_e60df46347b664cc,
};
static const uint16_t m_fbfdd2f9008c7cc1[] = {3, 2, 1, 0};
static const uint16_t i_fbfdd2f9008c7cc1[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_fbfdd2f9008c7cc1 = {
  0xfbfdd2f9008c7cc1, b_fbfdd2f9008c7cc1.words, 81, d_fbfdd2f9008c7cc1, m_fbfdd2f9008c7cc1,
  1, 4, i_fbfdd2f9008c7cc1, nullptr, nullptr, { &s_fbfdd2f9008c7cc1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_a8b24cbb662416b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177,  22,  36, 102, 187,  76, 178, 168,
     45,   0,   0,   0,   1,   0,   0,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  83,  97, 109,
    112, 108, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    204, 100, 182,  71,  99, 244,  13, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8b24cbb662416b1 = b_a8b24cbb662416b1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8b24cbb662416b1[] = {
  &s_e60df46347b664cc,
};
static const uint16_t m_a8b24cbb662416b1[] = {0};
static const uint16_t i_a8b24cbb662416b1[] = {0};
const ::capnp::_::RawSchema s_a8b24cbb662416b1 = {
  0xa8b24cbb662416b1, b_a8b24cbb662416b1.words, 40, d_a8b24cbb662416b1, m_a8b24cbb662416b1,
  1, 1, i_a8b24cbb662416b1, nullptr, nullptr, { &s_a8b24cbb662416b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_fddad509ef0256d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
     45,   0,   0,   0,   1,   0,   2,   0,
     30, 190, 214, 108, 217,  28,   1, 237,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  76, 105, 109,
    105, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    109, 105, 110,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fddad509ef0256d5 = b_fddad509ef0256d5.words;
#if !CAPNP_LITE
static const uint16_t m_fddad509ef0256d5[] = {1, 0};
static const uint16_t i_fddad509ef0256d5[] = {0, 1};
const ::capnp::_::RawSchema s_fddad509ef0256d5 = {
  0xfddad509ef0256d5, b_fddad509ef0256d5.words, 51, nullptr, m_fddad509ef0256d5,
  0, 2, i_fddad509ef0256d5, nullptr, nullptr, { &s_fddad509ef0256d5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_94d9c6f1e746180c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12,  24,  70, 231, 241, 198, 217, 148,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  48,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94d9c6f1e746180c = b_94d9c6f1e746180c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_94d9c6f1e746180c = {
  0x94d9c6f1e746180c, b_94d9c6f1e746180c.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_94d9c6f1e746180c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_d00f3a9205281d84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  29,  40,   5, 146,  58,  15, 208,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  48,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d00f3a9205281d84 = b_d00f3a9205281d84.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d00f3a9205281d84 = {
  0xd00f3a9205281d84, b_d00f3a9205281d84.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d00f3a9205281d84, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ba7088ad1cf2e7e3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227, 231, 242,  28, 173, 136, 112, 186,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  49,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba7088ad1cf2e7e3 = b_ba7088ad1cf2e7e3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba7088ad1cf2e7e3 = {
  0xba7088ad1cf2e7e3, b_ba7088ad1cf2e7e3.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba7088ad1cf2e7e3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_c70d2c00a6218156 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86, 129,  33, 166,   0,  44,  13, 199,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  49,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c70d2c00a6218156 = b_c70d2c00a6218156.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c70d2c00a6218156 = {
  0xc70d2c00a6218156, b_c70d2c00a6218156.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c70d2c00a6218156, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_d56edd726b4a4dbe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  77,  74, 107, 114, 221, 110, 213,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 109, 109, 105, 116,  67, 102, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 109, 109, 105, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d56edd726b4a4dbe = b_d56edd726b4a4dbe.words;
#if !CAPNP_LITE
static const uint16_t m_d56edd726b4a4dbe[] = {0};
static const uint16_t i_d56edd726b4a4dbe[] = {0};
const ::capnp::_::RawSchema s_d56edd726b4a4dbe = {
  0xd56edd726b4a4dbe, b_d56edd726b4a4dbe.words, 37, nullptr, m_d56edd726b4a4dbe,
  0, 1, i_d56edd726b4a4dbe, nullptr, nullptr, { &s_d56edd726b4a4dbe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_c94b0171f8b0a944 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68, 169, 176, 248, 113,   1,  75, 201,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 109, 109, 105, 116,  67, 102, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c94b0171f8b0a944 = b_c94b0171f8b0a944.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c94b0171f8b0a944 = {
  0xc94b0171f8b0a944, b_c94b0171f8b0a944.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c94b0171f8b0a944, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_aaa9d7eddf64fc23 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35, 252, 100, 223, 237, 215, 169, 170,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     67, 121,  99, 108, 105,  99,  68,  97,
    116,  97,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aaa9d7eddf64fc23 = b_aaa9d7eddf64fc23.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_aaa9d7eddf64fc23 = {
  0xaaa9d7eddf64fc23, b_aaa9d7eddf64fc23.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_aaa9d7eddf64fc23, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_c634f53eb33737e4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    228,  55,  55, 179,  62, 245,  52, 198,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     67, 121,  99, 108, 105,  99,  68,  97,
    116,  97,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    139, 240,  95, 210,  31,   6, 220, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c634f53eb33737e4 = b_c634f53eb33737e4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c634f53eb33737e4[] = {
  &s_eadc061fd25ff08b,
};
static const uint16_t m_c634f53eb33737e4[] = {0};
static const uint16_t i_c634f53eb33737e4[] = {0};
const ::capnp::_::RawSchema s_c634f53eb33737e4 = {
  0xc634f53eb33737e4, b_c634f53eb33737e4.words, 37, d_c634f53eb33737e4, m_c634f53eb33737e4,
  1, 1, i_c634f53eb33737e4, nullptr, nullptr, { &s_c634f53eb33737e4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_f3c17cd4ff9e10e2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    226,  16, 158, 255, 212, 124, 193, 243,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  72, 111, 109, 105, 110, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3c17cd4ff9e10e2 = b_f3c17cd4ff9e10e2.words;
#if !CAPNP_LITE
static const uint16_t m_f3c17cd4ff9e10e2[] = {0};
static const uint16_t i_f3c17cd4ff9e10e2[] = {0};
const ::capnp::_::RawSchema s_f3c17cd4ff9e10e2 = {
  0xf3c17cd4ff9e10e2, b_f3c17cd4ff9e10e2.words, 38, nullptr, m_f3c17cd4ff9e10e2,
  0, 1, i_f3c17cd4ff9e10e2, nullptr, nullptr, { &s_f3c17cd4ff9e10e2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<23> b_abf45e29bcfe3623 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35,  54, 254, 188,  41,  94, 244, 171,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  72, 111, 109, 105, 110, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abf45e29bcfe3623 = b_abf45e29bcfe3623.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_abf45e29bcfe3623 = {
  0xabf45e29bcfe3623, b_abf45e29bcfe3623.words, 23, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_abf45e29bcfe3623, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_fb216604f0268a50 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     80, 138,  38, 240,   4, 102,  33, 251,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  83, 116, 114, 101,  97, 109,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb216604f0268a50 = b_fb216604f0268a50.words;
#if !CAPNP_LITE
static const uint16_t m_fb216604f0268a50[] = {0};
static const uint16_t i_fb216604f0268a50[] = {0};
const ::capnp::_::RawSchema s_fb216604f0268a50 = {
  0xfb216604f0268a50, b_fb216604f0268a50.words, 38, nullptr, m_fb216604f0268a50,
  0, 1, i_fb216604f0268a50, nullptr, nullptr, { &s_fb216604f0268a50, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<23> b_fe946aeeb03ff1ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 241,  63, 176, 238, 106, 148, 254,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  83, 116, 114, 101,  97, 109,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe946aeeb03ff1ac = b_fe946aeeb03ff1ac.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fe946aeeb03ff1ac = {
  0xfe946aeeb03ff1ac, b_fe946aeeb03ff1ac.words, 23, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fe946aeeb03ff1ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_d85936d95ce2f392 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 243, 226,  92, 217,  54,  89, 216,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  74, 111, 103,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d85936d95ce2f392 = b_d85936d95ce2f392.words;
#if !CAPNP_LITE
static const uint16_t m_d85936d95ce2f392[] = {0};
static const uint16_t i_d85936d95ce2f392[] = {0};
const ::capnp::_::RawSchema s_d85936d95ce2f392 = {
  0xd85936d95ce2f392, b_d85936d95ce2f392.words, 38, nullptr, m_d85936d95ce2f392,
  0, 1, i_d85936d95ce2f392, nullptr, nullptr, { &s_d85936d95ce2f392, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_83fce31a2394b63a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58, 182, 148,  35,  26, 227, 252, 131,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  74, 111, 103,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_83fce31a2394b63a = b_83fce31a2394b63a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_83fce31a2394b63a = {
  0x83fce31a2394b63a, b_83fce31a2394b63a.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_83fce31a2394b63a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_908902dae37848d1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209,  72, 120, 227, 218,   2, 137, 144,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  73, 110,  97,  99, 116, 105,
    118, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_908902dae37848d1 = b_908902dae37848d1.words;
#if !CAPNP_LITE
static const uint16_t m_908902dae37848d1[] = {0};
static const uint16_t i_908902dae37848d1[] = {0};
const ::capnp::_::RawSchema s_908902dae37848d1 = {
  0x908902dae37848d1, b_908902dae37848d1.words, 39, nullptr, m_908902dae37848d1,
  0, 1, i_908902dae37848d1, nullptr, nullptr, { &s_908902dae37848d1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<23> b_f8dd223f2086ffdd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221, 255, 134,  32,  63,  34, 221, 248,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  73, 110,  97,  99, 116, 105,
    118, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8dd223f2086ffdd = b_f8dd223f2086ffdd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f8dd223f2086ffdd = {
  0xf8dd223f2086ffdd, b_f8dd223f2086ffdd.words, 23, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f8dd223f2086ffdd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_8a23db1c0f588cf7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247, 140,  88,  15,  28, 219,  35, 138,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  71,  67, 111, 100, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a23db1c0f588cf7 = b_8a23db1c0f588cf7.words;
#if !CAPNP_LITE
static const uint16_t m_8a23db1c0f588cf7[] = {0};
static const uint16_t i_8a23db1c0f588cf7[] = {0};
const ::capnp::_::RawSchema s_8a23db1c0f588cf7 = {
  0x8a23db1c0f588cf7, b_8a23db1c0f588cf7.words, 38, nullptr, m_8a23db1c0f588cf7,
  0, 1, i_8a23db1c0f588cf7, nullptr, nullptr, { &s_8a23db1c0f588cf7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_ca262677e14358aa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170,  88,  67, 225, 119,  38,  38, 202,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76,  99,  99, 116,  83, 101, 116,  77,
     97,  99, 104, 105, 110, 101,  77, 111,
    100, 101,  71,  67, 111, 100, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_ca262677e14358aa = b_ca262677e14358aa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ca262677e14358aa = {
  0xca262677e14358aa, b_ca262677e14358aa.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ca262677e14358aa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_9d87c288b18598e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224, 152, 133, 177, 136, 194, 135, 157,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  57,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d87c288b18598e0 = b_9d87c288b18598e0.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d87c288b18598e0 = {
  0x9d87c288b18598e0, b_9d87c288b18598e0.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d87c288b18598e0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_84c00eb748ee880e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 136, 238,  72, 183,  14, 192, 132,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  57,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84c00eb748ee880e = b_84c00eb748ee880e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_84c00eb748ee880e = {
  0x84c00eb748ee880e, b_84c00eb748ee880e.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_84c00eb748ee880e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_9410db5c1b95898c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    140, 137, 149,  27,  92, 219,  16, 148,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116,  97, 114, 116,  72, 111, 109,
    105, 110, 103,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9410db5c1b95898c = b_9410db5c1b95898c.words;
#if !CAPNP_LITE
static const uint16_t m_9410db5c1b95898c[] = {0};
static const uint16_t i_9410db5c1b95898c[] = {0};
const ::capnp::_::RawSchema s_9410db5c1b95898c = {
  0x9410db5c1b95898c, b_9410db5c1b95898c.words, 37, nullptr, m_9410db5c1b95898c,
  0, 1, i_9410db5c1b95898c, nullptr, nullptr, { &s_9410db5c1b95898c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_d502dcd61df3dd43 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67, 221, 243,  29, 214, 220,   2, 213,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116,  97, 114, 116,  72, 111, 109,
    105, 110, 103,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d502dcd61df3dd43 = b_d502dcd61df3dd43.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d502dcd61df3dd43 = {
  0xd502dcd61df3dd43, b_d502dcd61df3dd43.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d502dcd61df3dd43, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ba0cb72755ad0c81 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    129,  12, 173,  85,  39, 183,  12, 186,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  72, 111, 109, 105,
    110, 103,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba0cb72755ad0c81 = b_ba0cb72755ad0c81.words;
#if !CAPNP_LITE
static const uint16_t m_ba0cb72755ad0c81[] = {0};
static const uint16_t i_ba0cb72755ad0c81[] = {0};
const ::capnp::_::RawSchema s_ba0cb72755ad0c81 = {
  0xba0cb72755ad0c81, b_ba0cb72755ad0c81.words, 37, nullptr, m_ba0cb72755ad0c81,
  0, 1, i_ba0cb72755ad0c81, nullptr, nullptr, { &s_ba0cb72755ad0c81, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_9adb39571ce7b7c1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 183, 231,  28,  87,  57, 219, 154,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  72, 111, 109, 105,
    110, 103,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9adb39571ce7b7c1 = b_9adb39571ce7b7c1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9adb39571ce7b7c1 = {
  0x9adb39571ce7b7c1, b_9adb39571ce7b7c1.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9adb39571ce7b7c1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_9d3d82c6fe8e2743 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67,  39, 142, 254, 198, 130,  61, 157,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  88,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115, 105, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d3d82c6fe8e2743 = b_9d3d82c6fe8e2743.words;
#if !CAPNP_LITE
static const uint16_t m_9d3d82c6fe8e2743[] = {0};
static const uint16_t i_9d3d82c6fe8e2743[] = {0};
const ::capnp::_::RawSchema s_9d3d82c6fe8e2743 = {
  0x9d3d82c6fe8e2743, b_9d3d82c6fe8e2743.words, 38, nullptr, m_9d3d82c6fe8e2743,
  0, 1, i_9d3d82c6fe8e2743, nullptr, nullptr, { &s_9d3d82c6fe8e2743, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_afe265ff0acba912 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 169, 203,  10, 255, 101, 226, 175,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  88,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_afe265ff0acba912 = b_afe265ff0acba912.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_afe265ff0acba912 = {
  0xafe265ff0acba912, b_afe265ff0acba912.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_afe265ff0acba912, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_d17bbf55f4eb616f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111,  97, 235, 244,  85, 191, 123, 209,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  89,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115, 105, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d17bbf55f4eb616f = b_d17bbf55f4eb616f.words;
#if !CAPNP_LITE
static const uint16_t m_d17bbf55f4eb616f[] = {0};
static const uint16_t i_d17bbf55f4eb616f[] = {0};
const ::capnp::_::RawSchema s_d17bbf55f4eb616f = {
  0xd17bbf55f4eb616f, b_d17bbf55f4eb616f.words, 38, nullptr, m_d17bbf55f4eb616f,
  0, 1, i_d17bbf55f4eb616f, nullptr, nullptr, { &s_d17bbf55f4eb616f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_df02092e53cabd57 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 189, 202,  83,  46,   9,   2, 223,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  89,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_df02092e53cabd57 = b_df02092e53cabd57.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_df02092e53cabd57 = {
  0xdf02092e53cabd57, b_df02092e53cabd57.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_df02092e53cabd57, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_9ad023ab50197d6e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 125,  25,  80, 171,  35, 208, 154,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  90,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115, 105, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ad023ab50197d6e = b_9ad023ab50197d6e.words;
#if !CAPNP_LITE
static const uint16_t m_9ad023ab50197d6e[] = {0};
static const uint16_t i_9ad023ab50197d6e[] = {0};
const ::capnp::_::RawSchema s_9ad023ab50197d6e = {
  0x9ad023ab50197d6e, b_9ad023ab50197d6e.words, 38, nullptr, m_9ad023ab50197d6e,
  0, 1, i_9ad023ab50197d6e, nullptr, nullptr, { &s_9ad023ab50197d6e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e587cad4461f3f20 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32,  63,  31,  70, 212, 202, 135, 229,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     72, 111, 109, 101,  80, 111, 115, 105,
    116, 105, 111, 110,  90,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_e587cad4461f3f20 = b_e587cad4461f3f20.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e587cad4461f3f20 = {
  0xe587cad4461f3f20, b_e587cad4461f3f20.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e587cad4461f3f20, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_81e5ce6bda07ccc6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 204,   7, 218, 107, 206, 229, 129,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 101, 101, 100,  83, 112, 105,
    110, 100, 108, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 112, 101, 101, 100,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81e5ce6bda07ccc6 = b_81e5ce6bda07ccc6.words;
#if !CAPNP_LITE
static const uint16_t m_81e5ce6bda07ccc6[] = {0};
static const uint16_t i_81e5ce6bda07ccc6[] = {0};
const ::capnp::_::RawSchema s_81e5ce6bda07ccc6 = {
  0x81e5ce6bda07ccc6, b_81e5ce6bda07ccc6.words, 37, nullptr, m_81e5ce6bda07ccc6,
  0, 1, i_81e5ce6bda07ccc6, nullptr, nullptr, { &s_81e5ce6bda07ccc6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_fe8ea4c33ad9dc55 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     85, 220, 217,  58, 195, 164, 142, 254,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 101, 101, 100,  83, 112, 105,
    110, 100, 108, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe8ea4c33ad9dc55 = b_fe8ea4c33ad9dc55.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fe8ea4c33ad9dc55 = {
  0xfe8ea4c33ad9dc55, b_fe8ea4c33ad9dc55.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fe8ea4c33ad9dc55, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_9c69f7d947429388 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    136, 147,  66,  71, 217, 247, 105, 156,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     65,  99, 116, 105, 118, 101,  83, 112,
    105, 110, 100, 108, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c69f7d947429388 = b_9c69f7d947429388.words;
#if !CAPNP_LITE
static const uint16_t m_9c69f7d947429388[] = {0};
static const uint16_t i_9c69f7d947429388[] = {0};
const ::capnp::_::RawSchema s_9c69f7d947429388 = {
  0x9c69f7d947429388, b_9c69f7d947429388.words, 37, nullptr, m_9c69f7d947429388,
  0, 1, i_9c69f7d947429388, nullptr, nullptr, { &s_9c69f7d947429388, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_c9e46d43ae680cae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174,  12, 104, 174,  67, 109, 228, 201,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     65,  99, 116, 105, 118, 101,  83, 112,
    105, 110, 100, 108, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_c9e46d43ae680cae = b_c9e46d43ae680cae.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c9e46d43ae680cae = {
  0xc9e46d43ae680cae, b_c9e46d43ae680cae.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c9e46d43ae680cae, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_ccf47e31c4da8a53 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 138, 218, 196,  49, 126, 244, 204,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  88,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ccf47e31c4da8a53 = b_ccf47e31c4da8a53.words;
#if !CAPNP_LITE
static const uint16_t m_ccf47e31c4da8a53[] = {0};
static const uint16_t i_ccf47e31c4da8a53[] = {0};
const ::capnp::_::RawSchema s_ccf47e31c4da8a53 = {
  0xccf47e31c4da8a53, b_ccf47e31c4da8a53.words, 36, nullptr, m_ccf47e31c4da8a53,
  0, 1, i_ccf47e31c4da8a53, nullptr, nullptr, { &s_ccf47e31c4da8a53, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ded6a6c9e11ab247 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71, 178,  26, 225, 201, 166, 214, 222,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  88,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ded6a6c9e11ab247 = b_ded6a6c9e11ab247.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ded6a6c9e11ab247 = {
  0xded6a6c9e11ab247, b_ded6a6c9e11ab247.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ded6a6c9e11ab247, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_da44714f93d5e7cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 231, 213, 147,  79, 113,  68, 218,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  89,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da44714f93d5e7cc = b_da44714f93d5e7cc.words;
#if !CAPNP_LITE
static const uint16_t m_da44714f93d5e7cc[] = {0};
static const uint16_t i_da44714f93d5e7cc[] = {0};
const ::capnp::_::RawSchema s_da44714f93d5e7cc = {
  0xda44714f93d5e7cc, b_da44714f93d5e7cc.words, 36, nullptr, m_da44714f93d5e7cc,
  0, 1, i_da44714f93d5e7cc, nullptr, nullptr, { &s_da44714f93d5e7cc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_d79ccd96033f25c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195,  37,  63,   3, 150, 205, 156, 215,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  89,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d79ccd96033f25c3 = b_d79ccd96033f25c3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d79ccd96033f25c3 = {
  0xd79ccd96033f25c3, b_d79ccd96033f25c3.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d79ccd96033f25c3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_edc6c31fb96d9511 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17, 149, 109, 185,  31, 195, 198, 237,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  90,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edc6c31fb96d9511 = b_edc6c31fb96d9511.words;
#if !CAPNP_LITE
static const uint16_t m_edc6c31fb96d9511[] = {0};
static const uint16_t i_edc6c31fb96d9511[] = {0};
const ::capnp::_::RawSchema s_edc6c31fb96d9511 = {
  0xedc6c31fb96d9511, b_edc6c31fb96d9511.words, 36, nullptr, m_edc6c31fb96d9511,
  0, 1, i_edc6c31fb96d9511, nullptr, nullptr, { &s_edc6c31fb96d9511, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ba32fbba8fb76a7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 106, 183, 143, 186, 251,  50, 186,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     74, 111, 103,  90,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba32fbba8fb76a7f = b_ba32fbba8fb76a7f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba32fbba8fb76a7f = {
  0xba32fbba8fb76a7f, b_ba32fbba8fb76a7f.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba32fbba8fb76a7f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_888ce3fe57eecc85 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 204, 238,  87, 254, 227, 140, 136,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     82, 101, 108,  74, 111, 103,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_888ce3fe57eecc85 = b_888ce3fe57eecc85.words;
#if !CAPNP_LITE
static const uint16_t m_888ce3fe57eecc85[] = {0};
static const uint16_t i_888ce3fe57eecc85[] = {0};
const ::capnp::_::RawSchema s_888ce3fe57eecc85 = {
  0x888ce3fe57eecc85, b_888ce3fe57eecc85.words, 36, nullptr, m_888ce3fe57eecc85,
  0, 1, i_888ce3fe57eecc85, nullptr, nullptr, { &s_888ce3fe57eecc85, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_9589a9cfdad470e2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    226, 112, 212, 218, 207, 169, 137, 149,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     82, 101, 108,  74, 111, 103,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_9589a9cfdad470e2 = b_9589a9cfdad470e2.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9589a9cfdad470e2 = {
  0x9589a9cfdad470e2, b_9589a9cfdad470e2.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9589a9cfdad470e2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a0e5438346a3f46f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111, 244, 163,  70, 131,  67, 229, 160,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     80, 108, 117, 115,  74, 111, 103,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108, 117, 115,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a0e5438346a3f46f = b_a0e5438346a3f46f.words;
#if !CAPNP_LITE
static const uint16_t m_a0e5438346a3f46f[] = {0};
static const uint16_t i_a0e5438346a3f46f[] = {0};
const ::capnp::_::RawSchema s_a0e5438346a3f46f = {
  0xa0e5438346a3f46f, b_a0e5438346a3f46f.words, 36, nullptr, m_a0e5438346a3f46f,
  0, 1, i_a0e5438346a3f46f, nullptr, nullptr, { &s_a0e5438346a3f46f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_d5d5bcf92b1bb768 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    104, 183,  27,  43, 249, 188, 213, 213,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     80, 108, 117, 115,  74, 111, 103,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_d5d5bcf92b1bb768 = b_d5d5bcf92b1bb768.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d5d5bcf92b1bb768 = {
  0xd5d5bcf92b1bb768, b_d5d5bcf92b1bb768.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d5d5bcf92b1bb768, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e5c4a931d1738cb7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    183, 140, 115, 209,  49, 169, 196, 229,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     77, 105, 110, 117, 115,  74, 111, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 105, 110, 117, 115,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5c4a931d1738cb7 = b_e5c4a931d1738cb7.words;
#if !CAPNP_LITE
static const uint16_t m_e5c4a931d1738cb7[] = {0};
static const uint16_t i_e5c4a931d1738cb7[] = {0};
const ::capnp::_::RawSchema s_e5c4a931d1738cb7 = {
  0xe5c4a931d1738cb7, b_e5c4a931d1738cb7.words, 36, nullptr, m_e5c4a931d1738cb7,
  0, 1, i_e5c4a931d1738cb7, nullptr, nullptr, { &s_e5c4a931d1738cb7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e34cda0f65dba83e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     62, 168, 219, 101,  15, 218,  76, 227,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     77, 105, 110, 117, 115,  74, 111, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e34cda0f65dba83e = b_e34cda0f65dba83e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e34cda0f65dba83e = {
  0xe34cda0f65dba83e, b_e34cda0f65dba83e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e34cda0f65dba83e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_97dc5760625ccb92 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 203,  92,  98,  96,  87, 220, 151,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     65,  98, 115,  74, 111, 103,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97dc5760625ccb92 = b_97dc5760625ccb92.words;
#if !CAPNP_LITE
static const uint16_t m_97dc5760625ccb92[] = {0};
static const uint16_t i_97dc5760625ccb92[] = {0};
const ::capnp::_::RawSchema s_97dc5760625ccb92 = {
  0x97dc5760625ccb92, b_97dc5760625ccb92.words, 36, nullptr, m_97dc5760625ccb92,
  0, 1, i_97dc5760625ccb92, nullptr, nullptr, { &s_97dc5760625ccb92, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_a60102323d6eae52 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82, 174, 110,  61,  50,   2,   1, 166,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     65,  98, 115,  74, 111, 103,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_a60102323d6eae52 = b_a60102323d6eae52.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a60102323d6eae52 = {
  0xa60102323d6eae52, b_a60102323d6eae52.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a60102323d6eae52, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8ea40be178b595d4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212, 149, 181, 120, 225,  11, 164, 142,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71, 111,  74, 111, 103,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ea40be178b595d4 = b_8ea40be178b595d4.words;
#if !CAPNP_LITE
static const uint16_t m_8ea40be178b595d4[] = {0};
static const uint16_t i_8ea40be178b595d4[] = {0};
const ::capnp::_::RawSchema s_8ea40be178b595d4 = {
  0x8ea40be178b595d4, b_8ea40be178b595d4.words, 36, nullptr, m_8ea40be178b595d4,
  0, 1, i_8ea40be178b595d4, nullptr, nullptr, { &s_8ea40be178b595d4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_bd4c35c139db288a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138,  40, 219,  57, 193,  53,  76, 189,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71, 111,  74, 111, 103,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_bd4c35c139db288a = b_bd4c35c139db288a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bd4c35c139db288a = {
  0xbd4c35c139db288a, b_bd4c35c139db288a.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bd4c35c139db288a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_86f5f7fe5f0ab53b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 181,  10,  95, 254, 247, 245, 134,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 101, 101, 100,  74, 111, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 112, 101, 101, 100,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86f5f7fe5f0ab53b = b_86f5f7fe5f0ab53b.words;
#if !CAPNP_LITE
static const uint16_t m_86f5f7fe5f0ab53b[] = {0};
static const uint16_t i_86f5f7fe5f0ab53b[] = {0};
const ::capnp::_::RawSchema s_86f5f7fe5f0ab53b = {
  0x86f5f7fe5f0ab53b, b_86f5f7fe5f0ab53b.words, 36, nullptr, m_86f5f7fe5f0ab53b,
  0, 1, i_86f5f7fe5f0ab53b, nullptr, nullptr, { &s_86f5f7fe5f0ab53b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_ae38be83698a93f2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242, 147, 138, 105, 131, 190,  56, 174,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 101, 101, 100,  74, 111, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ae38be83698a93f2 = b_ae38be83698a93f2.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ae38be83698a93f2 = {
  0xae38be83698a93f2, b_ae38be83698a93f2.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ae38be83698a93f2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cc4bda9e7d40b580 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    128, 181,  64, 125, 158, 218,  75, 204,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  74, 111, 103,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc4bda9e7d40b580 = b_cc4bda9e7d40b580.words;
#if !CAPNP_LITE
static const uint16_t m_cc4bda9e7d40b580[] = {0};
static const uint16_t i_cc4bda9e7d40b580[] = {0};
const ::capnp::_::RawSchema s_cc4bda9e7d40b580 = {
  0xcc4bda9e7d40b580, b_cc4bda9e7d40b580.words, 36, nullptr, m_cc4bda9e7d40b580,
  0, 1, i_cc4bda9e7d40b580, nullptr, nullptr, { &s_cc4bda9e7d40b580, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_af88235abe204f05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5,  79,  32, 190,  90,  35, 136, 175,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  74, 111, 103,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_af88235abe204f05 = b_af88235abe204f05.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_af88235abe204f05 = {
  0xaf88235abe204f05, b_af88235abe204f05.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_af88235abe204f05, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_a91d9243ccdfb391 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145, 179, 223, 204,  67, 146,  29, 169,
     45,   0,   0,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     79, 102, 102, 115, 101, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a91d9243ccdfb391 = b_a91d9243ccdfb391.words;
#if !CAPNP_LITE
static const uint16_t m_a91d9243ccdfb391[] = {3, 0, 1, 2};
static const uint16_t i_a91d9243ccdfb391[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_a91d9243ccdfb391 = {
  0xa91d9243ccdfb391, b_a91d9243ccdfb391.words, 81, nullptr, m_a91d9243ccdfb391,
  0, 4, i_a91d9243ccdfb391, nullptr, nullptr, { &s_a91d9243ccdfb391, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_88cae412b425b32a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 179,  37, 180,  18, 228, 202, 136,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     79, 102, 102, 115, 101, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_88cae412b425b32a = b_88cae412b425b32a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_88cae412b425b32a = {
  0x88cae412b425b32a, b_88cae412b425b32a.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_88cae412b425b32a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_b45f1c41e8ebf5ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 245, 235, 232,  65,  28,  95, 180,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  50,  56,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b45f1c41e8ebf5ba = b_b45f1c41e8ebf5ba.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b45f1c41e8ebf5ba = {
  0xb45f1c41e8ebf5ba, b_b45f1c41e8ebf5ba.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b45f1c41e8ebf5ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_fc687e5e41a7d110 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16, 209, 167,  65,  94, 126, 104, 252,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  50,  56,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc687e5e41a7d110 = b_fc687e5e41a7d110.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fc687e5e41a7d110 = {
  0xfc687e5e41a7d110, b_fc687e5e41a7d110.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fc687e5e41a7d110, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_c5d464b4e8931a22 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  26, 147, 232, 180, 100, 212, 197,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  50,  57,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5d464b4e8931a22 = b_c5d464b4e8931a22.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c5d464b4e8931a22 = {
  0xc5d464b4e8931a22, b_c5d464b4e8931a22.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c5d464b4e8931a22, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_db5492da2947fcfb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 252,  71,  41, 218, 146,  84, 219,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 100, 117, 109,
    109, 121,  50,  57,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db5492da2947fcfb = b_db5492da2947fcfb.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_db5492da2947fcfb = {
  0xdb5492da2947fcfb, b_db5492da2947fcfb.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_db5492da2947fcfb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_c92d9c0dda66d757 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 215, 102, 218,  13, 156,  45, 201,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116,  97, 114, 116,  83, 116, 114,
    101,  97, 109,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c92d9c0dda66d757 = b_c92d9c0dda66d757.words;
#if !CAPNP_LITE
static const uint16_t m_c92d9c0dda66d757[] = {0};
static const uint16_t i_c92d9c0dda66d757[] = {0};
const ::capnp::_::RawSchema s_c92d9c0dda66d757 = {
  0xc92d9c0dda66d757, b_c92d9c0dda66d757.words, 37, nullptr, m_c92d9c0dda66d757,
  0, 1, i_c92d9c0dda66d757, nullptr, nullptr, { &s_c92d9c0dda66d757, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_d16a455a6976b033 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 176, 118, 105,  90,  69, 106, 209,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116,  97, 114, 116,  83, 116, 114,
    101,  97, 109,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d16a455a6976b033 = b_d16a455a6976b033.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d16a455a6976b033 = {
  0xd16a455a6976b033, b_d16a455a6976b033.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d16a455a6976b033, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_bc6e924009f9269b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    155,  38, 249,   9,  64, 146, 110, 188,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  83, 116, 114, 101,
     97, 109,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc6e924009f9269b = b_bc6e924009f9269b.words;
#if !CAPNP_LITE
static const uint16_t m_bc6e924009f9269b[] = {0};
static const uint16_t i_bc6e924009f9269b[] = {0};
const ::capnp::_::RawSchema s_bc6e924009f9269b = {
  0xbc6e924009f9269b, b_bc6e924009f9269b.words, 37, nullptr, m_bc6e924009f9269b,
  0, 1, i_bc6e924009f9269b, nullptr, nullptr, { &s_bc6e924009f9269b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_f9fe19a15771cf26 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     38, 207, 113,  87, 161,  25, 254, 249,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 116, 111, 112,  83, 116, 114, 101,
     97, 109,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f9fe19a15771cf26 = b_f9fe19a15771cf26.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f9fe19a15771cf26 = {
  0xf9fe19a15771cf26, b_f9fe19a15771cf26.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f9fe19a15771cf26, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b980d2fed3b6fc3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 252, 182, 211, 254, 210, 128, 185,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71,  99, 111, 100, 101,  83, 116,  97,
    114, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b980d2fed3b6fc3b = b_b980d2fed3b6fc3b.words;
#if !CAPNP_LITE
static const uint16_t m_b980d2fed3b6fc3b[] = {0};
static const uint16_t i_b980d2fed3b6fc3b[] = {0};
const ::capnp::_::RawSchema s_b980d2fed3b6fc3b = {
  0xb980d2fed3b6fc3b, b_b980d2fed3b6fc3b.words, 37, nullptr, m_b980d2fed3b6fc3b,
  0, 1, i_b980d2fed3b6fc3b, nullptr, nullptr, { &s_b980d2fed3b6fc3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e2dd01349affe790 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 231, 255, 154,  52,   1, 221, 226,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71,  99, 111, 100, 101,  83, 116,  97,
    114, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2dd01349affe790 = b_e2dd01349affe790.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e2dd01349affe790 = {
  0xe2dd01349affe790, b_e2dd01349affe790.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e2dd01349affe790, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_cbaf279d6d698135 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53, 129, 105, 109, 157,  39, 175, 203,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71,  99, 111, 100, 101,  80,  97, 117,
    115, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbaf279d6d698135 = b_cbaf279d6d698135.words;
#if !CAPNP_LITE
static const uint16_t m_cbaf279d6d698135[] = {0};
static const uint16_t i_cbaf279d6d698135[] = {0};
const ::capnp::_::RawSchema s_cbaf279d6d698135 = {
  0xcbaf279d6d698135, b_cbaf279d6d698135.words, 37, nullptr, m_cbaf279d6d698135,
  0, 1, i_cbaf279d6d698135, nullptr, nullptr, { &s_cbaf279d6d698135, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_b4ff2ed5aa4201fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250,   1,  66, 170, 213,  46, 255, 180,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     71,  99, 111, 100, 101,  80,  97, 117,
    115, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4ff2ed5aa4201fa = b_b4ff2ed5aa4201fa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b4ff2ed5aa4201fa = {
  0xb4ff2ed5aa4201fa, b_b4ff2ed5aa4201fa.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b4ff2ed5aa4201fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_d84c2e81be3e94ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 148,  62, 190, 129,  46,  76, 216,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70,  97, 117, 108, 116,  82, 101, 115,
    101, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 101, 116,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d84c2e81be3e94ff = b_d84c2e81be3e94ff.words;
#if !CAPNP_LITE
static const uint16_t m_d84c2e81be3e94ff[] = {0};
static const uint16_t i_d84c2e81be3e94ff[] = {0};
const ::capnp::_::RawSchema s_d84c2e81be3e94ff = {
  0xd84c2e81be3e94ff, b_d84c2e81be3e94ff.words, 37, nullptr, m_d84c2e81be3e94ff,
  0, 1, i_d84c2e81be3e94ff, nullptr, nullptr, { &s_d84c2e81be3e94ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_a861c31ce893bce4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    228, 188, 147, 232,  28, 195,  97, 168,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70,  97, 117, 108, 116,  82, 101, 115,
    101, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a861c31ce893bce4 = b_a861c31ce893bce4.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a861c31ce893bce4 = {
  0xa861c31ce893bce4, b_a861c31ce893bce4.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a861c31ce893bce4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_f2317ca3259db1ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 177, 157,  37, 163, 124,  49, 242,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 114,  97, 116, 101,
     83,  99,  97, 108, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115,  99,  97, 108, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2317ca3259db1ff = b_f2317ca3259db1ff.words;
#if !CAPNP_LITE
static const uint16_t m_f2317ca3259db1ff[] = {0};
static const uint16_t i_f2317ca3259db1ff[] = {0};
const ::capnp::_::RawSchema s_f2317ca3259db1ff = {
  0xf2317ca3259db1ff, b_f2317ca3259db1ff.words, 37, nullptr, m_f2317ca3259db1ff,
  0, 1, i_f2317ca3259db1ff, nullptr, nullptr, { &s_f2317ca3259db1ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_fc0dc5bdb3e9c998 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152, 201, 233, 179, 189, 197,  13, 252,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 114,  97, 116, 101,
     83,  99,  97, 108, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_fc0dc5bdb3e9c998 = b_fc0dc5bdb3e9c998.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fc0dc5bdb3e9c998 = {
  0xfc0dc5bdb3e9c998, b_fc0dc5bdb3e9c998.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fc0dc5bdb3e9c998, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_9cca4ce002443ab6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    182,  58,  68,   2, 224,  76, 202, 156,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  82,
    101, 115, 101, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 101, 116,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9cca4ce002443ab6 = b_9cca4ce002443ab6.words;
#if !CAPNP_LITE
static const uint16_t m_9cca4ce002443ab6[] = {0};
static const uint16_t i_9cca4ce002443ab6[] = {0};
const ::capnp::_::RawSchema s_9cca4ce002443ab6 = {
  0x9cca4ce002443ab6, b_9cca4ce002443ab6.words, 37, nullptr, m_9cca4ce002443ab6,
  0, 1, i_9cca4ce002443ab6, nullptr, nullptr, { &s_9cca4ce002443ab6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e4077764f11210e7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    231,  16,  18, 241, 100, 119,   7, 228,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  82,
    101, 115, 101, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4077764f11210e7 = b_e4077764f11210e7.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e4077764f11210e7 = {
  0xe4077764f11210e7, b_e4077764f11210e7.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e4077764f11210e7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_94b7d45e1b999256 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86, 146, 153,  27,  94, 212, 183, 148,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 114, 101,  97,
    100,  76, 111, 103,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94b7d45e1b999256 = b_94b7d45e1b999256.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_94b7d45e1b999256 = {
  0x94b7d45e1b999256, b_94b7d45e1b999256.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_94b7d45e1b999256, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d085ec11e5b9e1e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229, 225, 185, 229,  17, 236, 133, 208,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 114, 101,  97,
    100,  76, 111, 103,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d085ec11e5b9e1e5 = b_d085ec11e5b9e1e5.words;
#if !CAPNP_LITE
static const uint16_t m_d085ec11e5b9e1e5[] = {0};
static const uint16_t i_d085ec11e5b9e1e5[] = {0};
const ::capnp::_::RawSchema s_d085ec11e5b9e1e5 = {
  0xd085ec11e5b9e1e5, b_d085ec11e5b9e1e5.words, 36, nullptr, m_d085ec11e5b9e1e5,
  0, 1, i_d085ec11e5b9e1e5, nullptr, nullptr, { &s_d085ec11e5b9e1e5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_dfcdf2a946a77eb8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 126, 167,  70, 169, 242, 205, 223,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 110, 102, 105, 103,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 102, 105, 103,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    149,  99,  75, 174, 209, 154, 139, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dfcdf2a946a77eb8 = b_dfcdf2a946a77eb8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dfcdf2a946a77eb8[] = {
  &s_cd8b9ad1ae4b6395,
};
static const uint16_t m_dfcdf2a946a77eb8[] = {0};
static const uint16_t i_dfcdf2a946a77eb8[] = {0};
const ::capnp::_::RawSchema s_dfcdf2a946a77eb8 = {
  0xdfcdf2a946a77eb8, b_dfcdf2a946a77eb8.words, 37, d_dfcdf2a946a77eb8, m_dfcdf2a946a77eb8,
  1, 1, i_dfcdf2a946a77eb8, nullptr, nullptr, { &s_dfcdf2a946a77eb8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_c83209b0bc17dd4d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     77, 221,  23, 188, 176,   9,  50, 200,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 110, 102, 105, 103,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_c83209b0bc17dd4d = b_c83209b0bc17dd4d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c83209b0bc17dd4d = {
  0xc83209b0bc17dd4d, b_c83209b0bc17dd4d.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c83209b0bc17dd4d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e1e62d654c30890d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13, 137,  48,  76, 101,  45, 230, 225,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 110, 102, 105, 103,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1e62d654c30890d = b_e1e62d654c30890d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e1e62d654c30890d = {
  0xe1e62d654c30890d, b_e1e62d654c30890d.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e1e62d654c30890d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ece13f8a02fb3d30 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  61, 251,   2, 138,  63, 225, 236,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     70, 101, 101, 100, 111, 112, 116,  67,
    111, 110, 102, 105, 103,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 102, 105, 103,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    149,  99,  75, 174, 209, 154, 139, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ece13f8a02fb3d30 = b_ece13f8a02fb3d30.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ece13f8a02fb3d30[] = {
  &s_cd8b9ad1ae4b6395,
};
static const uint16_t m_ece13f8a02fb3d30[] = {0};
static const uint16_t i_ece13f8a02fb3d30[] = {0};
const ::capnp::_::RawSchema s_ece13f8a02fb3d30 = {
  0xece13f8a02fb3d30, b_ece13f8a02fb3d30.words, 37, d_ece13f8a02fb3d30, m_ece13f8a02fb3d30,
  1, 1, i_ece13f8a02fb3d30, nullptr, nullptr, { &s_ece13f8a02fb3d30, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_92d81588aacd14e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229,  20, 205, 170, 136,  21, 216, 146,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  83, 116,  97,
    114, 116,  67, 104,  97, 110, 110, 101,
    108,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115,  97, 109, 112, 108, 101,  82,  97,
    116, 101,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92d81588aacd14e5 = b_92d81588aacd14e5.words;
#if !CAPNP_LITE
static const uint16_t m_92d81588aacd14e5[] = {0};
static const uint16_t i_92d81588aacd14e5[] = {0};
const ::capnp::_::RawSchema s_92d81588aacd14e5 = {
  0x92d81588aacd14e5, b_92d81588aacd14e5.words, 39, nullptr, m_92d81588aacd14e5,
  0, 1, i_92d81588aacd14e5, nullptr, nullptr, { &s_92d81588aacd14e5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_a869229536969b05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 155, 150,  54, 149,  34, 105, 168,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  83, 116,  97,
    114, 116,  67, 104,  97, 110, 110, 101,
    108,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a869229536969b05 = b_a869229536969b05.words;
#if !CAPNP_LITE
static const uint16_t m_a869229536969b05[] = {0};
static const uint16_t i_a869229536969b05[] = {0};
const ::capnp::_::RawSchema s_a869229536969b05 = {
  0xa869229536969b05, b_a869229536969b05.words, 38, nullptr, m_a869229536969b05,
  0, 1, i_a869229536969b05, nullptr, nullptr, { &s_a869229536969b05, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_852439e79ffc5863 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     99,  88, 252, 159, 231,  57,  36, 133,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  83, 116, 111,
    112,  67, 104,  97, 110, 110, 101, 108,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_852439e79ffc5863 = b_852439e79ffc5863.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_852439e79ffc5863 = {
  0x852439e79ffc5863, b_852439e79ffc5863.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_852439e79ffc5863, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_ae65e26f4a15a51d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     29, 165,  21,  74, 111, 226, 101, 174,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  83, 116, 111,
    112,  67, 104,  97, 110, 110, 101, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ae65e26f4a15a51d = b_ae65e26f4a15a51d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ae65e26f4a15a51d = {
  0xae65e26f4a15a51d, b_ae65e26f4a15a51d.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ae65e26f4a15a51d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_bc4685faf01cb762 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 183,  28, 240, 250, 133,  70, 188,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  82, 101,  97,
    100,  83,  97, 109, 112, 108, 101, 115,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_bc4685faf01cb762 = b_bc4685faf01cb762.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bc4685faf01cb762 = {
  0xbc4685faf01cb762, b_bc4685faf01cb762.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bc4685faf01cb762, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_d68fe435cf6009e8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232,   9,  96, 207,  53, 228, 143, 214,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 116, 111, 111,
    108, 112,  97, 116, 104,  82, 101,  97,
    100,  83,  97, 109, 112, 108, 101, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    115,  97, 109, 112, 108, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    177,  22,  36, 102, 187,  76, 178, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d68fe435cf6009e8 = b_d68fe435cf6009e8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d68fe435cf6009e8[] = {
  &s_a8b24cbb662416b1,
};
static const uint16_t m_d68fe435cf6009e8[] = {0};
static const uint16_t i_d68fe435cf6009e8[] = {0};
const ::capnp::_::RawSchema s_d68fe435cf6009e8 = {
  0xd68fe435cf6009e8, b_d68fe435cf6009e8.words, 42, d_d68fe435cf6009e8, m_d68fe435cf6009e8,
  1, 1, i_d68fe435cf6009e8, nullptr, nullptr, { &s_d68fe435cf6009e8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_bed746e703c78077 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119, 128, 199,   3, 231,  70, 215, 190,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 110,
    100,  70, 105, 108, 101,  80,  97, 114,
     97, 109,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 108, 101,  78,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 101,  79, 112,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bed746e703c78077 = b_bed746e703c78077.words;
#if !CAPNP_LITE
static const uint16_t m_bed746e703c78077[] = {0, 2, 1};
static const uint16_t i_bed746e703c78077[] = {0, 1, 2};
const ::capnp::_::RawSchema s_bed746e703c78077 = {
  0xbed746e703c78077, b_bed746e703c78077.words, 68, nullptr, m_bed746e703c78077,
  0, 3, i_bed746e703c78077, nullptr, nullptr, { &s_bed746e703c78077, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_99aabc9d5d261320 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32,  19,  38,  93, 157, 188, 170, 153,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 110,
    100,  70, 105, 108, 101,  80,  97, 114,
     97, 109,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99aabc9d5d261320 = b_99aabc9d5d261320.words;
#if !CAPNP_LITE
static const uint16_t m_99aabc9d5d261320[] = {0};
static const uint16_t i_99aabc9d5d261320[] = {0};
const ::capnp::_::RawSchema s_99aabc9d5d261320 = {
  0x99aabc9d5d261320, b_99aabc9d5d261320.words, 37, nullptr, m_99aabc9d5d261320,
  0, 1, i_99aabc9d5d261320, nullptr, nullptr, { &s_99aabc9d5d261320, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_dab6772ac9ee4662 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98,  70, 238, 201,  42, 119, 182, 218,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 110,
    100,  70, 105, 108, 101,  68,  97, 116,
     97,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dab6772ac9ee4662 = b_dab6772ac9ee4662.words;
#if !CAPNP_LITE
static const uint16_t m_dab6772ac9ee4662[] = {0};
static const uint16_t i_dab6772ac9ee4662[] = {0};
const ::capnp::_::RawSchema s_dab6772ac9ee4662 = {
  0xdab6772ac9ee4662, b_dab6772ac9ee4662.words, 37, nullptr, m_dab6772ac9ee4662,
  0, 1, i_dab6772ac9ee4662, nullptr, nullptr, { &s_dab6772ac9ee4662, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_e40c826ac6b097eb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    235, 151, 176, 198, 106, 130,  12, 228,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 110,
    100,  70, 105, 108, 101,  68,  97, 116,
     97,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e40c826ac6b097eb = b_e40c826ac6b097eb.words;
#if !CAPNP_LITE
static const uint16_t m_e40c826ac6b097eb[] = {0};
static const uint16_t i_e40c826ac6b097eb[] = {0};
const ::capnp::_::RawSchema s_e40c826ac6b097eb = {
  0xe40c826ac6b097eb, b_e40c826ac6b097eb.words, 37, nullptr, m_e40c826ac6b097eb,
  0, 1, i_e40c826ac6b097eb, nullptr, nullptr, { &s_e40c826ac6b097eb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e8e734dea677ccfe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254, 204, 119, 166, 222,  52, 231, 232,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 112,  97, 116,
    104,  69, 120, 105, 115, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8e734dea677ccfe = b_e8e734dea677ccfe.words;
#if !CAPNP_LITE
static const uint16_t m_e8e734dea677ccfe[] = {0};
static const uint16_t i_e8e734dea677ccfe[] = {0};
const ::capnp::_::RawSchema s_e8e734dea677ccfe = {
  0xe8e734dea677ccfe, b_e8e734dea677ccfe.words, 36, nullptr, m_e8e734dea677ccfe,
  0, 1, i_e8e734dea677ccfe, nullptr, nullptr, { &s_e8e734dea677ccfe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a39841af57d55d57 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87,  93, 213,  87, 175,  65, 152, 163,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 112,  97, 116,
    104,  69, 120, 105, 115, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a39841af57d55d57 = b_a39841af57d55d57.words;
#if !CAPNP_LITE
static const uint16_t m_a39841af57d55d57[] = {0};
static const uint16_t i_a39841af57d55d57[] = {0};
const ::capnp::_::RawSchema s_a39841af57d55d57 = {
  0xa39841af57d55d57, b_a39841af57d55d57.words, 36, nullptr, m_a39841af57d55d57,
  0, 1, i_a39841af57d55d57, nullptr, nullptr, { &s_a39841af57d55d57, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_be0b100cf14c8e53 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 142,  76, 241,  12,  16,  11, 190,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  70, 111, 108, 100, 101,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    102, 111, 108, 100, 101, 114,  80,  97,
    116, 104,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be0b100cf14c8e53 = b_be0b100cf14c8e53.words;
#if !CAPNP_LITE
static const uint16_t m_be0b100cf14c8e53[] = {0};
static const uint16_t i_be0b100cf14c8e53[] = {0};
const ::capnp::_::RawSchema s_be0b100cf14c8e53 = {
  0xbe0b100cf14c8e53, b_be0b100cf14c8e53.words, 38, nullptr, m_be0b100cf14c8e53,
  0, 1, i_be0b100cf14c8e53, nullptr, nullptr, { &s_be0b100cf14c8e53, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_da32e2e27e4acaf1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241, 202,  74, 126, 226, 226,  50, 218,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  70, 111, 108, 100, 101,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da32e2e27e4acaf1 = b_da32e2e27e4acaf1.words;
#if !CAPNP_LITE
static const uint16_t m_da32e2e27e4acaf1[] = {0};
static const uint16_t i_da32e2e27e4acaf1[] = {0};
const ::capnp::_::RawSchema s_da32e2e27e4acaf1 = {
  0xda32e2e27e4acaf1, b_da32e2e27e4acaf1.words, 37, nullptr, m_da32e2e27e4acaf1,
  0, 1, i_da32e2e27e4acaf1, nullptr, nullptr, { &s_da32e2e27e4acaf1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_fc4040d6adfd0ee6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  14, 253, 173, 214,  64,  64, 252,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76, 111,  97, 100,  83, 116, 114, 101,
     97, 109,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc4040d6adfd0ee6 = b_fc4040d6adfd0ee6.words;
#if !CAPNP_LITE
static const uint16_t m_fc4040d6adfd0ee6[] = {0};
static const uint16_t i_fc4040d6adfd0ee6[] = {0};
const ::capnp::_::RawSchema s_fc4040d6adfd0ee6 = {
  0xfc4040d6adfd0ee6, b_fc4040d6adfd0ee6.words, 37, nullptr, m_fc4040d6adfd0ee6,
  0, 1, i_fc4040d6adfd0ee6, nullptr, nullptr, { &s_fc4040d6adfd0ee6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e4486e3de9181908 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8,  25,  24, 233,  61, 110,  72, 228,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     76, 111,  97, 100,  83, 116, 114, 101,
     97, 109,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4486e3de9181908 = b_e4486e3de9181908.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e4486e3de9181908 = {
  0xe4486e3de9181908, b_e4486e3de9181908.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e4486e3de9181908, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b347fbab06fbef19 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     25, 239, 251,   6, 171, 251,  71, 179,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     80,  97, 117, 115, 101,  83, 116, 114,
    101,  97, 109,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b347fbab06fbef19 = b_b347fbab06fbef19.words;
#if !CAPNP_LITE
static const uint16_t m_b347fbab06fbef19[] = {0};
static const uint16_t i_b347fbab06fbef19[] = {0};
const ::capnp::_::RawSchema s_b347fbab06fbef19 = {
  0xb347fbab06fbef19, b_b347fbab06fbef19.words, 37, nullptr, m_b347fbab06fbef19,
  0, 1, i_b347fbab06fbef19, nullptr, nullptr, { &s_b347fbab06fbef19, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_860d2eaa0e36f757 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 247,  54,  14, 170,  46,  13, 134,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     80,  97, 117, 115, 101,  83, 116, 114,
    101,  97, 109,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_860d2eaa0e36f757 = b_860d2eaa0e36f757.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_860d2eaa0e36f757 = {
  0x860d2eaa0e36f757, b_860d2eaa0e36f757.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_860d2eaa0e36f757, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_97a4f475ccfbf68d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141, 246, 251, 204, 117, 244, 164, 151,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115,  97, 109,
    112, 108, 101, 114,  78, 101, 119,  70,
    105, 108, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97a4f475ccfbf68d = b_97a4f475ccfbf68d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_97a4f475ccfbf68d = {
  0x97a4f475ccfbf68d, b_97a4f475ccfbf68d.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_97a4f475ccfbf68d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_cb25eb18c2f01fc2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    194,  31, 240, 194,  24, 235,  37, 203,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115,  97, 109,
    112, 108, 101, 114,  78, 101, 119,  70,
    105, 108, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb25eb18c2f01fc2 = b_cb25eb18c2f01fc2.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cb25eb18c2f01fc2 = {
  0xcb25eb18c2f01fc2, b_cb25eb18c2f01fc2.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cb25eb18c2f01fc2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ab84aba81fbca268 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    104, 162, 188,  31, 168, 171, 132, 171,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     70, 105, 108, 101,  68,  97, 116,  97,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_ab84aba81fbca268 = b_ab84aba81fbca268.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ab84aba81fbca268 = {
  0xab84aba81fbca268, b_ab84aba81fbca268.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ab84aba81fbca268, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_bad7e94349be1955 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     85,  25, 190,  73,  67, 233, 215, 186,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     70, 105, 108, 101,  68,  97, 116,  97,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bad7e94349be1955 = b_bad7e94349be1955.words;
#if !CAPNP_LITE
static const uint16_t m_bad7e94349be1955[] = {0};
static const uint16_t i_bad7e94349be1955[] = {0};
const ::capnp::_::RawSchema s_bad7e94349be1955 = {
  0xbad7e94349be1955, b_bad7e94349be1955.words, 37, nullptr, m_bad7e94349be1955,
  0, 1, i_bad7e94349be1955, nullptr, nullptr, { &s_bad7e94349be1955, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_ce333bca0b1ad40a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10, 212,  26,  11, 202,  59,  51, 206,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83,  97, 109, 112, 108, 101, 114,  68,
    111, 119, 110, 108, 111,  97, 100,  70,
    105, 108, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    100, 111, 119, 110, 108, 111,  97, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ce333bca0b1ad40a = b_ce333bca0b1ad40a.words;
#if !CAPNP_LITE
static const uint16_t m_ce333bca0b1ad40a[] = {0};
static const uint16_t i_ce333bca0b1ad40a[] = {0};
const ::capnp::_::RawSchema s_ce333bca0b1ad40a = {
  0xce333bca0b1ad40a, b_ce333bca0b1ad40a.words, 39, nullptr, m_ce333bca0b1ad40a,
  0, 1, i_ce333bca0b1ad40a, nullptr, nullptr, { &s_ce333bca0b1ad40a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_abf9fdc2371bda77 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119, 218,  27,  55, 194, 253, 249, 171,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83,  97, 109, 112, 108, 101, 114,  68,
    111, 119, 110, 108, 111,  97, 100,  70,
    105, 108, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abf9fdc2371bda77 = b_abf9fdc2371bda77.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_abf9fdc2371bda77 = {
  0xabf9fdc2371bda77, b_abf9fdc2371bda77.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_abf9fdc2371bda77, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ac4195d24d2eb831 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49, 184,  46,  77, 210, 149,  65, 172,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 105, 110, 100, 108, 101,  84,
    104, 114, 101, 115, 104, 111, 108, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 101, 114,  99, 101, 110, 116,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac4195d24d2eb831 = b_ac4195d24d2eb831.words;
#if !CAPNP_LITE
static const uint16_t m_ac4195d24d2eb831[] = {0};
static const uint16_t i_ac4195d24d2eb831[] = {0};
const ::capnp::_::RawSchema s_ac4195d24d2eb831 = {
  0xac4195d24d2eb831, b_ac4195d24d2eb831.words, 37, nullptr, m_ac4195d24d2eb831,
  0, 1, i_ac4195d24d2eb831, nullptr, nullptr, { &s_ac4195d24d2eb831, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_88c87b6fdf59d6fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 214,  89, 223, 111, 123, 200, 136,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     83, 112, 105, 110, 100, 108, 101,  84,
    104, 114, 101, 115, 104, 111, 108, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88c87b6fdf59d6fb = b_88c87b6fdf59d6fb.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_88c87b6fdf59d6fb = {
  0x88c87b6fdf59d6fb, b_88c87b6fdf59d6fb.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_88c87b6fdf59d6fb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<67> b_84439c92b8d84e71 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    113,  78, 216, 184, 146, 156,  67, 132,
     45,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 116,  97,
    114, 116,  74, 111, 103,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     97, 120, 105, 115,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 114, 103, 101, 116,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 108,  97, 116, 105, 118, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84439c92b8d84e71 = b_84439c92b8d84e71.words;
#if !CAPNP_LITE
static const uint16_t m_84439c92b8d84e71[] = {0, 2, 1};
static const uint16_t i_84439c92b8d84e71[] = {0, 1, 2};
const ::capnp::_::RawSchema s_84439c92b8d84e71 = {
  0x84439c92b8d84e71, b_84439c92b8d84e71.words, 67, nullptr, m_84439c92b8d84e71,
  0, 3, i_84439c92b8d84e71, nullptr, nullptr, { &s_84439c92b8d84e71, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_d72d4b4d76d53778 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120,  55, 213, 118,  77,  75,  45, 215,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 116,  97,
    114, 116,  74, 111, 103,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_d72d4b4d76d53778 = b_d72d4b4d76d53778.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d72d4b4d76d53778 = {
  0xd72d4b4d76d53778, b_d72d4b4d76d53778.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d72d4b4d76d53778, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d4c7e1e86490686c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    108, 104, 144, 100, 232, 225, 199, 212,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 114, 101, 101,  84, 111, 111, 108,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 101,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4c7e1e86490686c = b_d4c7e1e86490686c.words;
#if !CAPNP_LITE
static const uint16_t m_d4c7e1e86490686c[] = {0};
static const uint16_t i_d4c7e1e86490686c[] = {0};
const ::capnp::_::RawSchema s_d4c7e1e86490686c = {
  0xd4c7e1e86490686c, b_d4c7e1e86490686c.words, 36, nullptr, m_d4c7e1e86490686c,
  0, 1, i_d4c7e1e86490686c, nullptr, nullptr, { &s_d4c7e1e86490686c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_b6f695b0a44ada0b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     11, 218,  74, 164, 176, 149, 246, 182,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 114, 101, 101,  84, 111, 111, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b6f695b0a44ada0b = b_b6f695b0a44ada0b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b6f695b0a44ada0b = {
  0xb6f695b0a44ada0b, b_b6f695b0a44ada0b.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b6f695b0a44ada0b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_a717f1944b4b8489 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 132,  75,  75, 148, 241,  23, 167,
     45,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 114, 101, 101,  80,  97, 108, 101,
    116, 116, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 101,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a717f1944b4b8489 = b_a717f1944b4b8489.words;
#if !CAPNP_LITE
static const uint16_t m_a717f1944b4b8489[] = {0};
static const uint16_t i_a717f1944b4b8489[] = {0};
const ::capnp::_::RawSchema s_a717f1944b4b8489 = {
  0xa717f1944b4b8489, b_a717f1944b4b8489.words, 37, nullptr, m_a717f1944b4b8489,
  0, 1, i_a717f1944b4b8489, nullptr, nullptr, { &s_a717f1944b4b8489, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_ec342a24a0a9d421 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 212, 169, 160,  36,  42,  52, 236,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 115, 101, 116,
     70, 114, 101, 101,  80,  97, 108, 101,
    116, 116, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec342a24a0a9d421 = b_ec342a24a0a9d421.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ec342a24a0a9d421 = {
  0xec342a24a0a9d421, b_ec342a24a0a9d421.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ec342a24a0a9d421, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e501411ac654fd31 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49, 253,  84, 198,  26,  65,   1, 229,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     77,  97,  99, 104, 105, 110, 101,  76,
    105, 109, 105, 116, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e501411ac654fd31 = b_e501411ac654fd31.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e501411ac654fd31 = {
  0xe501411ac654fd31, b_e501411ac654fd31.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e501411ac654fd31, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<97> b_89d99ca16f826ea9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 110, 130, 111, 161, 156, 217, 137,
     45,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 112, 101, 110,  99, 110,  95, 105,
    110, 116, 101, 114, 102,  97,  99, 101,
     46,  99,  97, 112, 110, 112,  58,  79,
    112, 101, 110,  67,  78,  83, 101, 114,
    118, 101, 114,  73, 110, 116, 101, 114,
    102,  97,  99, 101,  46, 103, 101, 116,
     77,  97,  99, 104, 105, 110, 101,  76,
    105, 109, 105, 116, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     66,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    213,  86,   2, 239,   9, 213, 218, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89d99ca16f826ea9 = b_89d99ca16f826ea9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89d99ca16f826ea9[] = {
  &s_fddad509ef0256d5,
};
static const uint16_t m_89d99ca16f826ea9[] = {3, 4, 0, 1, 2};
static const uint16_t i_89d99ca16f826ea9[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_89d99ca16f826ea9 = {
  0x89d99ca16f826ea9, b_89d99ca16f826ea9.words, 97, d_89d99ca16f826ea9, m_89d99ca16f826ea9,
  1, 5, i_89d99ca16f826ea9, nullptr, nullptr, { &s_89d99ca16f826ea9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::CMCtlModel::GetValParams,  ::CMCtlModel::GetValResults>
CMCtlModel::Client::getValRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CMCtlModel::GetValParams,  ::CMCtlModel::GetValResults>(
      0x8bef39bd9f14136bull, 0, sizeHint);
}
::kj::Promise<void> CMCtlModel::Server::getVal(GetValContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:CMCtlModel", "getVal",
      0x8bef39bd9f14136bull, 0);
}
::capnp::Request< ::CMCtlModel::SetValParams,  ::CMCtlModel::SetValResults>
CMCtlModel::Client::setValRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CMCtlModel::SetValParams,  ::CMCtlModel::SetValResults>(
      0x8bef39bd9f14136bull, 1, sizeHint);
}
::kj::Promise<void> CMCtlModel::Server::setVal(SetValContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:CMCtlModel", "setVal",
      0x8bef39bd9f14136bull, 1);
}
::capnp::Request< ::CMCtlModel::ActionsParams,  ::CMCtlModel::ActionsResults>
CMCtlModel::Client::actionsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CMCtlModel::ActionsParams,  ::CMCtlModel::ActionsResults>(
      0x8bef39bd9f14136bull, 2, sizeHint);
}
::kj::Promise<void> CMCtlModel::Server::actions(ActionsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:CMCtlModel", "actions",
      0x8bef39bd9f14136bull, 2);
}
::kj::Promise<void> CMCtlModel::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8bef39bd9f14136bull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("opencn_interface.capnp:CMCtlModel", interfaceId);
  }
}
::kj::Promise<void> CMCtlModel::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getVal(::capnp::Capability::Server::internalGetTypedContext<
           ::CMCtlModel::GetValParams,  ::CMCtlModel::GetValResults>(context));
    case 1:
      return setVal(::capnp::Capability::Server::internalGetTypedContext<
           ::CMCtlModel::SetValParams,  ::CMCtlModel::SetValResults>(context));
    case 2:
      return actions(::capnp::Capability::Server::internalGetTypedContext<
           ::CMCtlModel::ActionsParams,  ::CMCtlModel::ActionsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "opencn_interface.capnp:CMCtlModel",
          0x8bef39bd9f14136bull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CMCtlModel
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::ModelValue
constexpr uint16_t CMCtlModel::ModelValue::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::ModelValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::ModelValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::ModelValue::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::ModelValue::Value
constexpr uint16_t CMCtlModel::ModelValue::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::ModelValue::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::ModelValue::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::ModelValue::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::Action
constexpr uint16_t CMCtlModel::Action::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::Action::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::Action::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::Action::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::Result
constexpr uint16_t CMCtlModel::Result::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::Result::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::Result::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::Result::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::GetValParams
constexpr uint16_t CMCtlModel::GetValParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::GetValParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::GetValParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::GetValParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::GetValResults
constexpr uint16_t CMCtlModel::GetValResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::GetValResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::GetValResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::GetValResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::SetValParams
constexpr uint16_t CMCtlModel::SetValParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::SetValParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::SetValParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::SetValParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::SetValResults
constexpr uint16_t CMCtlModel::SetValResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::SetValResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::SetValResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::SetValResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::ActionsParams
constexpr uint16_t CMCtlModel::ActionsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::ActionsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::ActionsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::ActionsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlModel::ActionsResults
constexpr uint16_t CMCtlModel::ActionsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlModel::ActionsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlModel::ActionsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlModel::ActionsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::CMCtlParams::GetParamListParams,  ::CMCtlParams::GetParamListResults>
CMCtlParams::Client::getParamListRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CMCtlParams::GetParamListParams,  ::CMCtlParams::GetParamListResults>(
      0xda8fd131c56cb627ull, 0, sizeHint);
}
::kj::Promise<void> CMCtlParams::Server::getParamList(GetParamListContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:CMCtlParams", "getParamList",
      0xda8fd131c56cb627ull, 0);
}
::kj::Promise<void> CMCtlParams::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xda8fd131c56cb627ull:
      return dispatchCallInternal(methodId, context);
    case 0x8bef39bd9f14136bull:
      return  ::CMCtlModel::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("opencn_interface.capnp:CMCtlParams", interfaceId);
  }
}
::kj::Promise<void> CMCtlParams::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getParamList(::capnp::Capability::Server::internalGetTypedContext<
           ::CMCtlParams::GetParamListParams,  ::CMCtlParams::GetParamListResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "opencn_interface.capnp:CMCtlParams",
          0xda8fd131c56cb627ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CMCtlParams
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlParams::Param
constexpr uint16_t CMCtlParams::Param::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlParams::Param::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlParams::Param::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlParams::Param::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlParams::GetParamListParams
constexpr uint16_t CMCtlParams::GetParamListParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlParams::GetParamListParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlParams::GetParamListParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlParams::GetParamListParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlParams::GetParamListResults
constexpr uint16_t CMCtlParams::GetParamListResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlParams::GetParamListResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlParams::GetParamListResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlParams::GetParamListResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::CMCtlPins::GetPinListParams,  ::CMCtlPins::GetPinListResults>
CMCtlPins::Client::getPinListRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CMCtlPins::GetPinListParams,  ::CMCtlPins::GetPinListResults>(
      0x9d72a49ccb3ac4d0ull, 0, sizeHint);
}
::kj::Promise<void> CMCtlPins::Server::getPinList(GetPinListContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:CMCtlPins", "getPinList",
      0x9d72a49ccb3ac4d0ull, 0);
}
::kj::Promise<void> CMCtlPins::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9d72a49ccb3ac4d0ull:
      return dispatchCallInternal(methodId, context);
    case 0x8bef39bd9f14136bull:
      return  ::CMCtlModel::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("opencn_interface.capnp:CMCtlPins", interfaceId);
  }
}
::kj::Promise<void> CMCtlPins::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getPinList(::capnp::Capability::Server::internalGetTypedContext<
           ::CMCtlPins::GetPinListParams,  ::CMCtlPins::GetPinListResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "opencn_interface.capnp:CMCtlPins",
          0x9d72a49ccb3ac4d0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CMCtlPins
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlPins::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlPins::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlPins::Pin
constexpr uint16_t CMCtlPins::Pin::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlPins::Pin::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlPins::Pin::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlPins::Pin::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlPins::GetPinListParams
constexpr uint16_t CMCtlPins::GetPinListParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlPins::GetPinListParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlPins::GetPinListParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlPins::GetPinListParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CMCtlPins::GetPinListResults
constexpr uint16_t CMCtlPins::GetPinListResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CMCtlPins::GetPinListResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CMCtlPins::GetPinListResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CMCtlPins::GetPinListResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::OpenCNServerInterface::Dummy0Params,  ::OpenCNServerInterface::Dummy0Results>
OpenCNServerInterface::Client::dummy0Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::Dummy0Params,  ::OpenCNServerInterface::Dummy0Results>(
      0xed011cd96cd6be1eull, 0, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::dummy0(Dummy0Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "dummy0",
      0xed011cd96cd6be1eull, 0);
}
::capnp::Request< ::OpenCNServerInterface::Dummy1Params,  ::OpenCNServerInterface::Dummy1Results>
OpenCNServerInterface::Client::dummy1Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::Dummy1Params,  ::OpenCNServerInterface::Dummy1Results>(
      0xed011cd96cd6be1eull, 1, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::dummy1(Dummy1Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "dummy1",
      0xed011cd96cd6be1eull, 1);
}
::capnp::Request< ::OpenCNServerInterface::SetFeedoptCommitCfgParams,  ::OpenCNServerInterface::SetFeedoptCommitCfgResults>
OpenCNServerInterface::Client::setFeedoptCommitCfgRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFeedoptCommitCfgParams,  ::OpenCNServerInterface::SetFeedoptCommitCfgResults>(
      0xed011cd96cd6be1eull, 2, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFeedoptCommitCfg(SetFeedoptCommitCfgContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFeedoptCommitCfg",
      0xed011cd96cd6be1eull, 2);
}
::capnp::Request< ::OpenCNServerInterface::GetCyclicDataParams,  ::OpenCNServerInterface::GetCyclicDataResults>
OpenCNServerInterface::Client::getCyclicDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::GetCyclicDataParams,  ::OpenCNServerInterface::GetCyclicDataResults>(
      0xed011cd96cd6be1eull, 3, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::getCyclicData(GetCyclicDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "getCyclicData",
      0xed011cd96cd6be1eull, 3);
}
::capnp::Request< ::OpenCNServerInterface::SetLcctSetMachineModeHomingParams,  ::OpenCNServerInterface::SetLcctSetMachineModeHomingResults>
OpenCNServerInterface::Client::setLcctSetMachineModeHomingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLcctSetMachineModeHomingParams,  ::OpenCNServerInterface::SetLcctSetMachineModeHomingResults>(
      0xed011cd96cd6be1eull, 4, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLcctSetMachineModeHoming(SetLcctSetMachineModeHomingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLcctSetMachineModeHoming",
      0xed011cd96cd6be1eull, 4);
}
::capnp::Request< ::OpenCNServerInterface::SetLcctSetMachineModeStreamParams,  ::OpenCNServerInterface::SetLcctSetMachineModeStreamResults>
OpenCNServerInterface::Client::setLcctSetMachineModeStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLcctSetMachineModeStreamParams,  ::OpenCNServerInterface::SetLcctSetMachineModeStreamResults>(
      0xed011cd96cd6be1eull, 5, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLcctSetMachineModeStream(SetLcctSetMachineModeStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLcctSetMachineModeStream",
      0xed011cd96cd6be1eull, 5);
}
::capnp::Request< ::OpenCNServerInterface::SetLcctSetMachineModeJogParams,  ::OpenCNServerInterface::SetLcctSetMachineModeJogResults>
OpenCNServerInterface::Client::setLcctSetMachineModeJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLcctSetMachineModeJogParams,  ::OpenCNServerInterface::SetLcctSetMachineModeJogResults>(
      0xed011cd96cd6be1eull, 6, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLcctSetMachineModeJog(SetLcctSetMachineModeJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLcctSetMachineModeJog",
      0xed011cd96cd6be1eull, 6);
}
::capnp::Request< ::OpenCNServerInterface::SetLcctSetMachineModeInactiveParams,  ::OpenCNServerInterface::SetLcctSetMachineModeInactiveResults>
OpenCNServerInterface::Client::setLcctSetMachineModeInactiveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLcctSetMachineModeInactiveParams,  ::OpenCNServerInterface::SetLcctSetMachineModeInactiveResults>(
      0xed011cd96cd6be1eull, 7, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLcctSetMachineModeInactive(SetLcctSetMachineModeInactiveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLcctSetMachineModeInactive",
      0xed011cd96cd6be1eull, 7);
}
::capnp::Request< ::OpenCNServerInterface::SetLcctSetMachineModeGCodeParams,  ::OpenCNServerInterface::SetLcctSetMachineModeGCodeResults>
OpenCNServerInterface::Client::setLcctSetMachineModeGCodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLcctSetMachineModeGCodeParams,  ::OpenCNServerInterface::SetLcctSetMachineModeGCodeResults>(
      0xed011cd96cd6be1eull, 8, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLcctSetMachineModeGCode(SetLcctSetMachineModeGCodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLcctSetMachineModeGCode",
      0xed011cd96cd6be1eull, 8);
}
::capnp::Request< ::OpenCNServerInterface::Dummy9Params,  ::OpenCNServerInterface::Dummy9Results>
OpenCNServerInterface::Client::dummy9Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::Dummy9Params,  ::OpenCNServerInterface::Dummy9Results>(
      0xed011cd96cd6be1eull, 9, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::dummy9(Dummy9Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "dummy9",
      0xed011cd96cd6be1eull, 9);
}
::capnp::Request< ::OpenCNServerInterface::SetStartHomingParams,  ::OpenCNServerInterface::SetStartHomingResults>
OpenCNServerInterface::Client::setStartHomingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetStartHomingParams,  ::OpenCNServerInterface::SetStartHomingResults>(
      0xed011cd96cd6be1eull, 10, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setStartHoming(SetStartHomingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setStartHoming",
      0xed011cd96cd6be1eull, 10);
}
::capnp::Request< ::OpenCNServerInterface::SetStopHomingParams,  ::OpenCNServerInterface::SetStopHomingResults>
OpenCNServerInterface::Client::setStopHomingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetStopHomingParams,  ::OpenCNServerInterface::SetStopHomingResults>(
      0xed011cd96cd6be1eull, 11, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setStopHoming(SetStopHomingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setStopHoming",
      0xed011cd96cd6be1eull, 11);
}
::capnp::Request< ::OpenCNServerInterface::SetHomePositionXParams,  ::OpenCNServerInterface::SetHomePositionXResults>
OpenCNServerInterface::Client::setHomePositionXRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetHomePositionXParams,  ::OpenCNServerInterface::SetHomePositionXResults>(
      0xed011cd96cd6be1eull, 12, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setHomePositionX(SetHomePositionXContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setHomePositionX",
      0xed011cd96cd6be1eull, 12);
}
::capnp::Request< ::OpenCNServerInterface::SetHomePositionYParams,  ::OpenCNServerInterface::SetHomePositionYResults>
OpenCNServerInterface::Client::setHomePositionYRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetHomePositionYParams,  ::OpenCNServerInterface::SetHomePositionYResults>(
      0xed011cd96cd6be1eull, 13, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setHomePositionY(SetHomePositionYContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setHomePositionY",
      0xed011cd96cd6be1eull, 13);
}
::capnp::Request< ::OpenCNServerInterface::SetHomePositionZParams,  ::OpenCNServerInterface::SetHomePositionZResults>
OpenCNServerInterface::Client::setHomePositionZRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetHomePositionZParams,  ::OpenCNServerInterface::SetHomePositionZResults>(
      0xed011cd96cd6be1eull, 14, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setHomePositionZ(SetHomePositionZContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setHomePositionZ",
      0xed011cd96cd6be1eull, 14);
}
::capnp::Request< ::OpenCNServerInterface::SetSpeedSpindleParams,  ::OpenCNServerInterface::SetSpeedSpindleResults>
OpenCNServerInterface::Client::setSpeedSpindleRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetSpeedSpindleParams,  ::OpenCNServerInterface::SetSpeedSpindleResults>(
      0xed011cd96cd6be1eull, 15, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setSpeedSpindle(SetSpeedSpindleContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setSpeedSpindle",
      0xed011cd96cd6be1eull, 15);
}
::capnp::Request< ::OpenCNServerInterface::SetActiveSpindleParams,  ::OpenCNServerInterface::SetActiveSpindleResults>
OpenCNServerInterface::Client::setActiveSpindleRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetActiveSpindleParams,  ::OpenCNServerInterface::SetActiveSpindleResults>(
      0xed011cd96cd6be1eull, 16, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setActiveSpindle(SetActiveSpindleContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setActiveSpindle",
      0xed011cd96cd6be1eull, 16);
}
::capnp::Request< ::OpenCNServerInterface::SetJogXParams,  ::OpenCNServerInterface::SetJogXResults>
OpenCNServerInterface::Client::setJogXRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetJogXParams,  ::OpenCNServerInterface::SetJogXResults>(
      0xed011cd96cd6be1eull, 17, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setJogX(SetJogXContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setJogX",
      0xed011cd96cd6be1eull, 17);
}
::capnp::Request< ::OpenCNServerInterface::SetJogYParams,  ::OpenCNServerInterface::SetJogYResults>
OpenCNServerInterface::Client::setJogYRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetJogYParams,  ::OpenCNServerInterface::SetJogYResults>(
      0xed011cd96cd6be1eull, 18, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setJogY(SetJogYContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setJogY",
      0xed011cd96cd6be1eull, 18);
}
::capnp::Request< ::OpenCNServerInterface::SetJogZParams,  ::OpenCNServerInterface::SetJogZResults>
OpenCNServerInterface::Client::setJogZRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetJogZParams,  ::OpenCNServerInterface::SetJogZResults>(
      0xed011cd96cd6be1eull, 19, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setJogZ(SetJogZContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setJogZ",
      0xed011cd96cd6be1eull, 19);
}
::capnp::Request< ::OpenCNServerInterface::SetRelJogParams,  ::OpenCNServerInterface::SetRelJogResults>
OpenCNServerInterface::Client::setRelJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetRelJogParams,  ::OpenCNServerInterface::SetRelJogResults>(
      0xed011cd96cd6be1eull, 20, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setRelJog(SetRelJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setRelJog",
      0xed011cd96cd6be1eull, 20);
}
::capnp::Request< ::OpenCNServerInterface::SetPlusJogParams,  ::OpenCNServerInterface::SetPlusJogResults>
OpenCNServerInterface::Client::setPlusJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetPlusJogParams,  ::OpenCNServerInterface::SetPlusJogResults>(
      0xed011cd96cd6be1eull, 21, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setPlusJog(SetPlusJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setPlusJog",
      0xed011cd96cd6be1eull, 21);
}
::capnp::Request< ::OpenCNServerInterface::SetMinusJogParams,  ::OpenCNServerInterface::SetMinusJogResults>
OpenCNServerInterface::Client::setMinusJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetMinusJogParams,  ::OpenCNServerInterface::SetMinusJogResults>(
      0xed011cd96cd6be1eull, 22, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setMinusJog(SetMinusJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setMinusJog",
      0xed011cd96cd6be1eull, 22);
}
::capnp::Request< ::OpenCNServerInterface::SetAbsJogParams,  ::OpenCNServerInterface::SetAbsJogResults>
OpenCNServerInterface::Client::setAbsJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetAbsJogParams,  ::OpenCNServerInterface::SetAbsJogResults>(
      0xed011cd96cd6be1eull, 23, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setAbsJog(SetAbsJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setAbsJog",
      0xed011cd96cd6be1eull, 23);
}
::capnp::Request< ::OpenCNServerInterface::SetGoJogParams,  ::OpenCNServerInterface::SetGoJogResults>
OpenCNServerInterface::Client::setGoJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetGoJogParams,  ::OpenCNServerInterface::SetGoJogResults>(
      0xed011cd96cd6be1eull, 24, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setGoJog(SetGoJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setGoJog",
      0xed011cd96cd6be1eull, 24);
}
::capnp::Request< ::OpenCNServerInterface::SetSpeedJogParams,  ::OpenCNServerInterface::SetSpeedJogResults>
OpenCNServerInterface::Client::setSpeedJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetSpeedJogParams,  ::OpenCNServerInterface::SetSpeedJogResults>(
      0xed011cd96cd6be1eull, 25, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setSpeedJog(SetSpeedJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setSpeedJog",
      0xed011cd96cd6be1eull, 25);
}
::capnp::Request< ::OpenCNServerInterface::SetStopJogParams,  ::OpenCNServerInterface::SetStopJogResults>
OpenCNServerInterface::Client::setStopJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetStopJogParams,  ::OpenCNServerInterface::SetStopJogResults>(
      0xed011cd96cd6be1eull, 26, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setStopJog(SetStopJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setStopJog",
      0xed011cd96cd6be1eull, 26);
}
::capnp::Request< ::OpenCNServerInterface::SetOffsetParams,  ::OpenCNServerInterface::SetOffsetResults>
OpenCNServerInterface::Client::setOffsetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetOffsetParams,  ::OpenCNServerInterface::SetOffsetResults>(
      0xed011cd96cd6be1eull, 27, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setOffset(SetOffsetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setOffset",
      0xed011cd96cd6be1eull, 27);
}
::capnp::Request< ::OpenCNServerInterface::Dummy28Params,  ::OpenCNServerInterface::Dummy28Results>
OpenCNServerInterface::Client::dummy28Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::Dummy28Params,  ::OpenCNServerInterface::Dummy28Results>(
      0xed011cd96cd6be1eull, 28, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::dummy28(Dummy28Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "dummy28",
      0xed011cd96cd6be1eull, 28);
}
::capnp::Request< ::OpenCNServerInterface::Dummy29Params,  ::OpenCNServerInterface::Dummy29Results>
OpenCNServerInterface::Client::dummy29Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::Dummy29Params,  ::OpenCNServerInterface::Dummy29Results>(
      0xed011cd96cd6be1eull, 29, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::dummy29(Dummy29Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "dummy29",
      0xed011cd96cd6be1eull, 29);
}
::capnp::Request< ::OpenCNServerInterface::SetStartStreamParams,  ::OpenCNServerInterface::SetStartStreamResults>
OpenCNServerInterface::Client::setStartStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetStartStreamParams,  ::OpenCNServerInterface::SetStartStreamResults>(
      0xed011cd96cd6be1eull, 30, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setStartStream(SetStartStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setStartStream",
      0xed011cd96cd6be1eull, 30);
}
::capnp::Request< ::OpenCNServerInterface::SetStopStreamParams,  ::OpenCNServerInterface::SetStopStreamResults>
OpenCNServerInterface::Client::setStopStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetStopStreamParams,  ::OpenCNServerInterface::SetStopStreamResults>(
      0xed011cd96cd6be1eull, 31, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setStopStream(SetStopStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setStopStream",
      0xed011cd96cd6be1eull, 31);
}
::capnp::Request< ::OpenCNServerInterface::SetGcodeStartParams,  ::OpenCNServerInterface::SetGcodeStartResults>
OpenCNServerInterface::Client::setGcodeStartRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetGcodeStartParams,  ::OpenCNServerInterface::SetGcodeStartResults>(
      0xed011cd96cd6be1eull, 32, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setGcodeStart(SetGcodeStartContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setGcodeStart",
      0xed011cd96cd6be1eull, 32);
}
::capnp::Request< ::OpenCNServerInterface::SetGcodePauseParams,  ::OpenCNServerInterface::SetGcodePauseResults>
OpenCNServerInterface::Client::setGcodePauseRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetGcodePauseParams,  ::OpenCNServerInterface::SetGcodePauseResults>(
      0xed011cd96cd6be1eull, 33, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setGcodePause(SetGcodePauseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setGcodePause",
      0xed011cd96cd6be1eull, 33);
}
::capnp::Request< ::OpenCNServerInterface::SetFaultResetParams,  ::OpenCNServerInterface::SetFaultResetResults>
OpenCNServerInterface::Client::setFaultResetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFaultResetParams,  ::OpenCNServerInterface::SetFaultResetResults>(
      0xed011cd96cd6be1eull, 34, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFaultReset(SetFaultResetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFaultReset",
      0xed011cd96cd6be1eull, 34);
}
::capnp::Request< ::OpenCNServerInterface::SetFeedrateScaleParams,  ::OpenCNServerInterface::SetFeedrateScaleResults>
OpenCNServerInterface::Client::setFeedrateScaleRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFeedrateScaleParams,  ::OpenCNServerInterface::SetFeedrateScaleResults>(
      0xed011cd96cd6be1eull, 35, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFeedrateScale(SetFeedrateScaleContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFeedrateScale",
      0xed011cd96cd6be1eull, 35);
}
::capnp::Request< ::OpenCNServerInterface::SetFeedoptResetParams,  ::OpenCNServerInterface::SetFeedoptResetResults>
OpenCNServerInterface::Client::setFeedoptResetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFeedoptResetParams,  ::OpenCNServerInterface::SetFeedoptResetResults>(
      0xed011cd96cd6be1eull, 36, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFeedoptReset(SetFeedoptResetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFeedoptReset",
      0xed011cd96cd6be1eull, 36);
}
::capnp::Request< ::OpenCNServerInterface::ReadLogParams,  ::OpenCNServerInterface::ReadLogResults>
OpenCNServerInterface::Client::readLogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::ReadLogParams,  ::OpenCNServerInterface::ReadLogResults>(
      0xed011cd96cd6be1eull, 37, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::readLog(ReadLogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "readLog",
      0xed011cd96cd6be1eull, 37);
}
::capnp::Request< ::OpenCNServerInterface::SetFeedoptConfigParams,  ::OpenCNServerInterface::SetFeedoptConfigResults>
OpenCNServerInterface::Client::setFeedoptConfigRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFeedoptConfigParams,  ::OpenCNServerInterface::SetFeedoptConfigResults>(
      0xed011cd96cd6be1eull, 38, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFeedoptConfig(SetFeedoptConfigContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFeedoptConfig",
      0xed011cd96cd6be1eull, 38);
}
::capnp::Request< ::OpenCNServerInterface::GetFeedoptConfigParams,  ::OpenCNServerInterface::GetFeedoptConfigResults>
OpenCNServerInterface::Client::getFeedoptConfigRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::GetFeedoptConfigParams,  ::OpenCNServerInterface::GetFeedoptConfigResults>(
      0xed011cd96cd6be1eull, 39, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::getFeedoptConfig(GetFeedoptConfigContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "getFeedoptConfig",
      0xed011cd96cd6be1eull, 39);
}
::capnp::Request< ::OpenCNServerInterface::ToolpathStartChannelParams,  ::OpenCNServerInterface::ToolpathStartChannelResults>
OpenCNServerInterface::Client::toolpathStartChannelRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::ToolpathStartChannelParams,  ::OpenCNServerInterface::ToolpathStartChannelResults>(
      0xed011cd96cd6be1eull, 40, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::toolpathStartChannel(ToolpathStartChannelContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "toolpathStartChannel",
      0xed011cd96cd6be1eull, 40);
}
::capnp::Request< ::OpenCNServerInterface::ToolpathStopChannelParams,  ::OpenCNServerInterface::ToolpathStopChannelResults>
OpenCNServerInterface::Client::toolpathStopChannelRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::ToolpathStopChannelParams,  ::OpenCNServerInterface::ToolpathStopChannelResults>(
      0xed011cd96cd6be1eull, 41, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::toolpathStopChannel(ToolpathStopChannelContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "toolpathStopChannel",
      0xed011cd96cd6be1eull, 41);
}
::capnp::Request< ::OpenCNServerInterface::ToolpathReadSamplesParams,  ::OpenCNServerInterface::ToolpathReadSamplesResults>
OpenCNServerInterface::Client::toolpathReadSamplesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::ToolpathReadSamplesParams,  ::OpenCNServerInterface::ToolpathReadSamplesResults>(
      0xed011cd96cd6be1eull, 42, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::toolpathReadSamples(ToolpathReadSamplesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "toolpathReadSamples",
      0xed011cd96cd6be1eull, 42);
}
::capnp::Request< ::OpenCNServerInterface::SendFileParamParams,  ::OpenCNServerInterface::SendFileParamResults>
OpenCNServerInterface::Client::sendFileParamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SendFileParamParams,  ::OpenCNServerInterface::SendFileParamResults>(
      0xed011cd96cd6be1eull, 43, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::sendFileParam(SendFileParamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "sendFileParam",
      0xed011cd96cd6be1eull, 43);
}
::capnp::Request< ::OpenCNServerInterface::SendFileDataParams,  ::OpenCNServerInterface::SendFileDataResults>
OpenCNServerInterface::Client::sendFileDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SendFileDataParams,  ::OpenCNServerInterface::SendFileDataResults>(
      0xed011cd96cd6be1eull, 44, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::sendFileData(SendFileDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "sendFileData",
      0xed011cd96cd6be1eull, 44);
}
::capnp::Request< ::OpenCNServerInterface::PathExistParams,  ::OpenCNServerInterface::PathExistResults>
OpenCNServerInterface::Client::pathExistRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::PathExistParams,  ::OpenCNServerInterface::PathExistResults>(
      0xed011cd96cd6be1eull, 45, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::pathExist(PathExistContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "pathExist",
      0xed011cd96cd6be1eull, 45);
}
::capnp::Request< ::OpenCNServerInterface::CreateFolderParams,  ::OpenCNServerInterface::CreateFolderResults>
OpenCNServerInterface::Client::createFolderRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::CreateFolderParams,  ::OpenCNServerInterface::CreateFolderResults>(
      0xed011cd96cd6be1eull, 46, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::createFolder(CreateFolderContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "createFolder",
      0xed011cd96cd6be1eull, 46);
}
::capnp::Request< ::OpenCNServerInterface::SetLoadStreamParams,  ::OpenCNServerInterface::SetLoadStreamResults>
OpenCNServerInterface::Client::setLoadStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetLoadStreamParams,  ::OpenCNServerInterface::SetLoadStreamResults>(
      0xed011cd96cd6be1eull, 47, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setLoadStream(SetLoadStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setLoadStream",
      0xed011cd96cd6be1eull, 47);
}
::capnp::Request< ::OpenCNServerInterface::SetPauseStreamParams,  ::OpenCNServerInterface::SetPauseStreamResults>
OpenCNServerInterface::Client::setPauseStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetPauseStreamParams,  ::OpenCNServerInterface::SetPauseStreamResults>(
      0xed011cd96cd6be1eull, 48, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setPauseStream(SetPauseStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setPauseStream",
      0xed011cd96cd6be1eull, 48);
}
::capnp::Request< ::OpenCNServerInterface::SamplerNewFileParams,  ::OpenCNServerInterface::SamplerNewFileResults>
OpenCNServerInterface::Client::samplerNewFileRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SamplerNewFileParams,  ::OpenCNServerInterface::SamplerNewFileResults>(
      0xed011cd96cd6be1eull, 49, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::samplerNewFile(SamplerNewFileContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "samplerNewFile",
      0xed011cd96cd6be1eull, 49);
}
::capnp::Request< ::OpenCNServerInterface::GetFileDataParams,  ::OpenCNServerInterface::GetFileDataResults>
OpenCNServerInterface::Client::getFileDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::GetFileDataParams,  ::OpenCNServerInterface::GetFileDataResults>(
      0xed011cd96cd6be1eull, 50, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::getFileData(GetFileDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "getFileData",
      0xed011cd96cd6be1eull, 50);
}
::capnp::Request< ::OpenCNServerInterface::SetSamplerDownloadFileParams,  ::OpenCNServerInterface::SetSamplerDownloadFileResults>
OpenCNServerInterface::Client::setSamplerDownloadFileRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetSamplerDownloadFileParams,  ::OpenCNServerInterface::SetSamplerDownloadFileResults>(
      0xed011cd96cd6be1eull, 51, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setSamplerDownloadFile(SetSamplerDownloadFileContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setSamplerDownloadFile",
      0xed011cd96cd6be1eull, 51);
}
::capnp::Request< ::OpenCNServerInterface::SetSpindleThresholdParams,  ::OpenCNServerInterface::SetSpindleThresholdResults>
OpenCNServerInterface::Client::setSpindleThresholdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetSpindleThresholdParams,  ::OpenCNServerInterface::SetSpindleThresholdResults>(
      0xed011cd96cd6be1eull, 52, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setSpindleThreshold(SetSpindleThresholdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setSpindleThreshold",
      0xed011cd96cd6be1eull, 52);
}
::capnp::Request< ::OpenCNServerInterface::StartJogParams,  ::OpenCNServerInterface::StartJogResults>
OpenCNServerInterface::Client::startJogRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::StartJogParams,  ::OpenCNServerInterface::StartJogResults>(
      0xed011cd96cd6be1eull, 53, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::startJog(StartJogContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "startJog",
      0xed011cd96cd6be1eull, 53);
}
::capnp::Request< ::OpenCNServerInterface::SetFreeToolParams,  ::OpenCNServerInterface::SetFreeToolResults>
OpenCNServerInterface::Client::setFreeToolRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFreeToolParams,  ::OpenCNServerInterface::SetFreeToolResults>(
      0xed011cd96cd6be1eull, 54, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFreeTool(SetFreeToolContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFreeTool",
      0xed011cd96cd6be1eull, 54);
}
::capnp::Request< ::OpenCNServerInterface::SetFreePaletteParams,  ::OpenCNServerInterface::SetFreePaletteResults>
OpenCNServerInterface::Client::setFreePaletteRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::SetFreePaletteParams,  ::OpenCNServerInterface::SetFreePaletteResults>(
      0xed011cd96cd6be1eull, 55, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::setFreePalette(SetFreePaletteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "setFreePalette",
      0xed011cd96cd6be1eull, 55);
}
::capnp::Request< ::OpenCNServerInterface::GetMachineLimitsParams,  ::OpenCNServerInterface::GetMachineLimitsResults>
OpenCNServerInterface::Client::getMachineLimitsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::OpenCNServerInterface::GetMachineLimitsParams,  ::OpenCNServerInterface::GetMachineLimitsResults>(
      0xed011cd96cd6be1eull, 56, sizeHint);
}
::kj::Promise<void> OpenCNServerInterface::Server::getMachineLimits(GetMachineLimitsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "opencn_interface.capnp:OpenCNServerInterface", "getMachineLimits",
      0xed011cd96cd6be1eull, 56);
}
::kj::Promise<void> OpenCNServerInterface::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xed011cd96cd6be1eull:
      return dispatchCallInternal(methodId, context);
    case 0x8bef39bd9f14136bull:
      return  ::CMCtlModel::Server::dispatchCallInternal(methodId, context);
    case 0x9d72a49ccb3ac4d0ull:
      return  ::CMCtlPins::Server::dispatchCallInternal(methodId, context);
    case 0xda8fd131c56cb627ull:
      return  ::CMCtlParams::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("opencn_interface.capnp:OpenCNServerInterface", interfaceId);
  }
}
::kj::Promise<void> OpenCNServerInterface::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return dummy0(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::Dummy0Params,  ::OpenCNServerInterface::Dummy0Results>(context));
    case 1:
      return dummy1(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::Dummy1Params,  ::OpenCNServerInterface::Dummy1Results>(context));
    case 2:
      return setFeedoptCommitCfg(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFeedoptCommitCfgParams,  ::OpenCNServerInterface::SetFeedoptCommitCfgResults>(context));
    case 3:
      return getCyclicData(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::GetCyclicDataParams,  ::OpenCNServerInterface::GetCyclicDataResults>(context));
    case 4:
      return setLcctSetMachineModeHoming(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLcctSetMachineModeHomingParams,  ::OpenCNServerInterface::SetLcctSetMachineModeHomingResults>(context));
    case 5:
      return setLcctSetMachineModeStream(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLcctSetMachineModeStreamParams,  ::OpenCNServerInterface::SetLcctSetMachineModeStreamResults>(context));
    case 6:
      return setLcctSetMachineModeJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLcctSetMachineModeJogParams,  ::OpenCNServerInterface::SetLcctSetMachineModeJogResults>(context));
    case 7:
      return setLcctSetMachineModeInactive(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLcctSetMachineModeInactiveParams,  ::OpenCNServerInterface::SetLcctSetMachineModeInactiveResults>(context));
    case 8:
      return setLcctSetMachineModeGCode(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLcctSetMachineModeGCodeParams,  ::OpenCNServerInterface::SetLcctSetMachineModeGCodeResults>(context));
    case 9:
      return dummy9(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::Dummy9Params,  ::OpenCNServerInterface::Dummy9Results>(context));
    case 10:
      return setStartHoming(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetStartHomingParams,  ::OpenCNServerInterface::SetStartHomingResults>(context));
    case 11:
      return setStopHoming(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetStopHomingParams,  ::OpenCNServerInterface::SetStopHomingResults>(context));
    case 12:
      return setHomePositionX(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetHomePositionXParams,  ::OpenCNServerInterface::SetHomePositionXResults>(context));
    case 13:
      return setHomePositionY(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetHomePositionYParams,  ::OpenCNServerInterface::SetHomePositionYResults>(context));
    case 14:
      return setHomePositionZ(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetHomePositionZParams,  ::OpenCNServerInterface::SetHomePositionZResults>(context));
    case 15:
      return setSpeedSpindle(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetSpeedSpindleParams,  ::OpenCNServerInterface::SetSpeedSpindleResults>(context));
    case 16:
      return setActiveSpindle(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetActiveSpindleParams,  ::OpenCNServerInterface::SetActiveSpindleResults>(context));
    case 17:
      return setJogX(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetJogXParams,  ::OpenCNServerInterface::SetJogXResults>(context));
    case 18:
      return setJogY(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetJogYParams,  ::OpenCNServerInterface::SetJogYResults>(context));
    case 19:
      return setJogZ(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetJogZParams,  ::OpenCNServerInterface::SetJogZResults>(context));
    case 20:
      return setRelJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetRelJogParams,  ::OpenCNServerInterface::SetRelJogResults>(context));
    case 21:
      return setPlusJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetPlusJogParams,  ::OpenCNServerInterface::SetPlusJogResults>(context));
    case 22:
      return setMinusJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetMinusJogParams,  ::OpenCNServerInterface::SetMinusJogResults>(context));
    case 23:
      return setAbsJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetAbsJogParams,  ::OpenCNServerInterface::SetAbsJogResults>(context));
    case 24:
      return setGoJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetGoJogParams,  ::OpenCNServerInterface::SetGoJogResults>(context));
    case 25:
      return setSpeedJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetSpeedJogParams,  ::OpenCNServerInterface::SetSpeedJogResults>(context));
    case 26:
      return setStopJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetStopJogParams,  ::OpenCNServerInterface::SetStopJogResults>(context));
    case 27:
      return setOffset(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetOffsetParams,  ::OpenCNServerInterface::SetOffsetResults>(context));
    case 28:
      return dummy28(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::Dummy28Params,  ::OpenCNServerInterface::Dummy28Results>(context));
    case 29:
      return dummy29(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::Dummy29Params,  ::OpenCNServerInterface::Dummy29Results>(context));
    case 30:
      return setStartStream(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetStartStreamParams,  ::OpenCNServerInterface::SetStartStreamResults>(context));
    case 31:
      return setStopStream(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetStopStreamParams,  ::OpenCNServerInterface::SetStopStreamResults>(context));
    case 32:
      return setGcodeStart(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetGcodeStartParams,  ::OpenCNServerInterface::SetGcodeStartResults>(context));
    case 33:
      return setGcodePause(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetGcodePauseParams,  ::OpenCNServerInterface::SetGcodePauseResults>(context));
    case 34:
      return setFaultReset(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFaultResetParams,  ::OpenCNServerInterface::SetFaultResetResults>(context));
    case 35:
      return setFeedrateScale(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFeedrateScaleParams,  ::OpenCNServerInterface::SetFeedrateScaleResults>(context));
    case 36:
      return setFeedoptReset(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFeedoptResetParams,  ::OpenCNServerInterface::SetFeedoptResetResults>(context));
    case 37:
      return readLog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::ReadLogParams,  ::OpenCNServerInterface::ReadLogResults>(context));
    case 38:
      return setFeedoptConfig(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFeedoptConfigParams,  ::OpenCNServerInterface::SetFeedoptConfigResults>(context));
    case 39:
      return getFeedoptConfig(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::GetFeedoptConfigParams,  ::OpenCNServerInterface::GetFeedoptConfigResults>(context));
    case 40:
      return toolpathStartChannel(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::ToolpathStartChannelParams,  ::OpenCNServerInterface::ToolpathStartChannelResults>(context));
    case 41:
      return toolpathStopChannel(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::ToolpathStopChannelParams,  ::OpenCNServerInterface::ToolpathStopChannelResults>(context));
    case 42:
      return toolpathReadSamples(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::ToolpathReadSamplesParams,  ::OpenCNServerInterface::ToolpathReadSamplesResults>(context));
    case 43:
      return sendFileParam(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SendFileParamParams,  ::OpenCNServerInterface::SendFileParamResults>(context));
    case 44:
      return sendFileData(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SendFileDataParams,  ::OpenCNServerInterface::SendFileDataResults>(context));
    case 45:
      return pathExist(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::PathExistParams,  ::OpenCNServerInterface::PathExistResults>(context));
    case 46:
      return createFolder(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::CreateFolderParams,  ::OpenCNServerInterface::CreateFolderResults>(context));
    case 47:
      return setLoadStream(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetLoadStreamParams,  ::OpenCNServerInterface::SetLoadStreamResults>(context));
    case 48:
      return setPauseStream(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetPauseStreamParams,  ::OpenCNServerInterface::SetPauseStreamResults>(context));
    case 49:
      return samplerNewFile(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SamplerNewFileParams,  ::OpenCNServerInterface::SamplerNewFileResults>(context));
    case 50:
      return getFileData(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::GetFileDataParams,  ::OpenCNServerInterface::GetFileDataResults>(context));
    case 51:
      return setSamplerDownloadFile(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetSamplerDownloadFileParams,  ::OpenCNServerInterface::SetSamplerDownloadFileResults>(context));
    case 52:
      return setSpindleThreshold(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetSpindleThresholdParams,  ::OpenCNServerInterface::SetSpindleThresholdResults>(context));
    case 53:
      return startJog(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::StartJogParams,  ::OpenCNServerInterface::StartJogResults>(context));
    case 54:
      return setFreeTool(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFreeToolParams,  ::OpenCNServerInterface::SetFreeToolResults>(context));
    case 55:
      return setFreePalette(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::SetFreePaletteParams,  ::OpenCNServerInterface::SetFreePaletteResults>(context));
    case 56:
      return getMachineLimits(::capnp::Capability::Server::internalGetTypedContext<
           ::OpenCNServerInterface::GetMachineLimitsParams,  ::OpenCNServerInterface::GetMachineLimitsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "opencn_interface.capnp:OpenCNServerInterface",
          0xed011cd96cd6be1eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// OpenCNServerInterface
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::CyclicData
constexpr uint16_t OpenCNServerInterface::CyclicData::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::CyclicData::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::CyclicData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::CyclicData::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::FeedoptSample
constexpr uint16_t OpenCNServerInterface::FeedoptSample::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::FeedoptSample::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::FeedoptSample::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::FeedoptSample::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Position
constexpr uint16_t OpenCNServerInterface::Position::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Position::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Position::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Position::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::AxisMode
constexpr uint16_t OpenCNServerInterface::AxisMode::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::AxisMode::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::AxisMode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::AxisMode::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::AxisMask
constexpr uint16_t OpenCNServerInterface::AxisMask::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::AxisMask::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::AxisMask::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::AxisMask::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::MachineMode
constexpr uint16_t OpenCNServerInterface::MachineMode::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::MachineMode::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::MachineMode::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::MachineMode::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Progress
constexpr uint16_t OpenCNServerInterface::Progress::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Progress::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Progress::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Progress::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::FeedOptCfg
constexpr uint16_t OpenCNServerInterface::FeedOptCfg::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::FeedOptCfg::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::FeedOptCfg::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::FeedOptCfg::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::PinValue
constexpr uint16_t OpenCNServerInterface::PinValue::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::PinValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::PinValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::PinValue::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::PinValue::Value
constexpr uint16_t OpenCNServerInterface::PinValue::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::PinValue::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::PinValue::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::PinValue::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Sample
constexpr uint16_t OpenCNServerInterface::Sample::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Sample::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Sample::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Sample::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Limit
constexpr uint16_t OpenCNServerInterface::Limit::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Limit::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Limit::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Limit::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy0Params
constexpr uint16_t OpenCNServerInterface::Dummy0Params::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy0Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy0Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy0Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy0Results
constexpr uint16_t OpenCNServerInterface::Dummy0Results::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy0Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy0Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy0Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy1Params
constexpr uint16_t OpenCNServerInterface::Dummy1Params::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy1Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy1Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy1Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy1Results
constexpr uint16_t OpenCNServerInterface::Dummy1Results::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy1Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy1Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy1Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptCommitCfgParams
constexpr uint16_t OpenCNServerInterface::SetFeedoptCommitCfgParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptCommitCfgParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptCommitCfgParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptCommitCfgParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptCommitCfgResults
constexpr uint16_t OpenCNServerInterface::SetFeedoptCommitCfgResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptCommitCfgResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptCommitCfgResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptCommitCfgResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetCyclicDataParams
constexpr uint16_t OpenCNServerInterface::GetCyclicDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetCyclicDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetCyclicDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetCyclicDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetCyclicDataResults
constexpr uint16_t OpenCNServerInterface::GetCyclicDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetCyclicDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetCyclicDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetCyclicDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeHomingParams
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeHomingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeHomingParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeHomingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeHomingParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeHomingResults
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeHomingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeHomingResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeHomingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeHomingResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeStreamParams
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeStreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeStreamResults
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeStreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeJogParams
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeJogResults
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeInactiveParams
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeInactiveParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeInactiveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeInactiveParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeInactiveParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeInactiveResults
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeInactiveResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeInactiveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeInactiveResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeInactiveResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeGCodeParams
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeGCodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeGCodeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeGCodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeGCodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLcctSetMachineModeGCodeResults
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeGCodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLcctSetMachineModeGCodeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLcctSetMachineModeGCodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLcctSetMachineModeGCodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy9Params
constexpr uint16_t OpenCNServerInterface::Dummy9Params::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy9Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy9Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy9Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy9Results
constexpr uint16_t OpenCNServerInterface::Dummy9Results::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy9Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy9Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy9Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStartHomingParams
constexpr uint16_t OpenCNServerInterface::SetStartHomingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStartHomingParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStartHomingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStartHomingParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStartHomingResults
constexpr uint16_t OpenCNServerInterface::SetStartHomingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStartHomingResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStartHomingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStartHomingResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopHomingParams
constexpr uint16_t OpenCNServerInterface::SetStopHomingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopHomingParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopHomingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopHomingParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopHomingResults
constexpr uint16_t OpenCNServerInterface::SetStopHomingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopHomingResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopHomingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopHomingResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionXParams
constexpr uint16_t OpenCNServerInterface::SetHomePositionXParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionXParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionXParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionXParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionXResults
constexpr uint16_t OpenCNServerInterface::SetHomePositionXResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionXResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionXResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionXResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionYParams
constexpr uint16_t OpenCNServerInterface::SetHomePositionYParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionYParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionYParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionYParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionYResults
constexpr uint16_t OpenCNServerInterface::SetHomePositionYResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionYResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionYResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionYResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionZParams
constexpr uint16_t OpenCNServerInterface::SetHomePositionZParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionZParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionZParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionZParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetHomePositionZResults
constexpr uint16_t OpenCNServerInterface::SetHomePositionZResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetHomePositionZResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetHomePositionZResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetHomePositionZResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpeedSpindleParams
constexpr uint16_t OpenCNServerInterface::SetSpeedSpindleParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpeedSpindleParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpeedSpindleParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpeedSpindleParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpeedSpindleResults
constexpr uint16_t OpenCNServerInterface::SetSpeedSpindleResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpeedSpindleResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpeedSpindleResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpeedSpindleResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetActiveSpindleParams
constexpr uint16_t OpenCNServerInterface::SetActiveSpindleParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetActiveSpindleParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetActiveSpindleParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetActiveSpindleParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetActiveSpindleResults
constexpr uint16_t OpenCNServerInterface::SetActiveSpindleResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetActiveSpindleResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetActiveSpindleResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetActiveSpindleResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogXParams
constexpr uint16_t OpenCNServerInterface::SetJogXParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogXParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogXParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogXParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogXResults
constexpr uint16_t OpenCNServerInterface::SetJogXResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogXResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogXResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogXResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogYParams
constexpr uint16_t OpenCNServerInterface::SetJogYParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogYParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogYParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogYParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogYResults
constexpr uint16_t OpenCNServerInterface::SetJogYResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogYResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogYResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogYResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogZParams
constexpr uint16_t OpenCNServerInterface::SetJogZParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogZParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogZParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogZParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetJogZResults
constexpr uint16_t OpenCNServerInterface::SetJogZResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetJogZResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetJogZResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetJogZResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetRelJogParams
constexpr uint16_t OpenCNServerInterface::SetRelJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetRelJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetRelJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetRelJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetRelJogResults
constexpr uint16_t OpenCNServerInterface::SetRelJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetRelJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetRelJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetRelJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetPlusJogParams
constexpr uint16_t OpenCNServerInterface::SetPlusJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetPlusJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetPlusJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetPlusJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetPlusJogResults
constexpr uint16_t OpenCNServerInterface::SetPlusJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetPlusJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetPlusJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetPlusJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetMinusJogParams
constexpr uint16_t OpenCNServerInterface::SetMinusJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetMinusJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetMinusJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetMinusJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetMinusJogResults
constexpr uint16_t OpenCNServerInterface::SetMinusJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetMinusJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetMinusJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetMinusJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetAbsJogParams
constexpr uint16_t OpenCNServerInterface::SetAbsJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetAbsJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetAbsJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetAbsJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetAbsJogResults
constexpr uint16_t OpenCNServerInterface::SetAbsJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetAbsJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetAbsJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetAbsJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGoJogParams
constexpr uint16_t OpenCNServerInterface::SetGoJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGoJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGoJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGoJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGoJogResults
constexpr uint16_t OpenCNServerInterface::SetGoJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGoJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGoJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGoJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpeedJogParams
constexpr uint16_t OpenCNServerInterface::SetSpeedJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpeedJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpeedJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpeedJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpeedJogResults
constexpr uint16_t OpenCNServerInterface::SetSpeedJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpeedJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpeedJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpeedJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopJogParams
constexpr uint16_t OpenCNServerInterface::SetStopJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopJogResults
constexpr uint16_t OpenCNServerInterface::SetStopJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetOffsetParams
constexpr uint16_t OpenCNServerInterface::SetOffsetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetOffsetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetOffsetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetOffsetParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetOffsetResults
constexpr uint16_t OpenCNServerInterface::SetOffsetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetOffsetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetOffsetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetOffsetResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy28Params
constexpr uint16_t OpenCNServerInterface::Dummy28Params::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy28Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy28Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy28Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy28Results
constexpr uint16_t OpenCNServerInterface::Dummy28Results::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy28Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy28Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy28Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy29Params
constexpr uint16_t OpenCNServerInterface::Dummy29Params::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy29Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy29Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy29Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::Dummy29Results
constexpr uint16_t OpenCNServerInterface::Dummy29Results::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::Dummy29Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::Dummy29Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::Dummy29Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStartStreamParams
constexpr uint16_t OpenCNServerInterface::SetStartStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStartStreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStartStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStartStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStartStreamResults
constexpr uint16_t OpenCNServerInterface::SetStartStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStartStreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStartStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStartStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopStreamParams
constexpr uint16_t OpenCNServerInterface::SetStopStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopStreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetStopStreamResults
constexpr uint16_t OpenCNServerInterface::SetStopStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetStopStreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetStopStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetStopStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGcodeStartParams
constexpr uint16_t OpenCNServerInterface::SetGcodeStartParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGcodeStartParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGcodeStartParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGcodeStartParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGcodeStartResults
constexpr uint16_t OpenCNServerInterface::SetGcodeStartResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGcodeStartResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGcodeStartResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGcodeStartResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGcodePauseParams
constexpr uint16_t OpenCNServerInterface::SetGcodePauseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGcodePauseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGcodePauseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGcodePauseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetGcodePauseResults
constexpr uint16_t OpenCNServerInterface::SetGcodePauseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetGcodePauseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetGcodePauseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetGcodePauseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFaultResetParams
constexpr uint16_t OpenCNServerInterface::SetFaultResetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFaultResetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFaultResetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFaultResetParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFaultResetResults
constexpr uint16_t OpenCNServerInterface::SetFaultResetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFaultResetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFaultResetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFaultResetResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedrateScaleParams
constexpr uint16_t OpenCNServerInterface::SetFeedrateScaleParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedrateScaleParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedrateScaleParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedrateScaleParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedrateScaleResults
constexpr uint16_t OpenCNServerInterface::SetFeedrateScaleResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedrateScaleResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedrateScaleResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedrateScaleResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptResetParams
constexpr uint16_t OpenCNServerInterface::SetFeedoptResetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptResetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptResetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptResetParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptResetResults
constexpr uint16_t OpenCNServerInterface::SetFeedoptResetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptResetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptResetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptResetResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ReadLogParams
constexpr uint16_t OpenCNServerInterface::ReadLogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ReadLogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ReadLogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ReadLogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ReadLogResults
constexpr uint16_t OpenCNServerInterface::ReadLogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ReadLogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ReadLogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ReadLogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptConfigParams
constexpr uint16_t OpenCNServerInterface::SetFeedoptConfigParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptConfigParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptConfigParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptConfigParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFeedoptConfigResults
constexpr uint16_t OpenCNServerInterface::SetFeedoptConfigResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFeedoptConfigResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFeedoptConfigResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFeedoptConfigResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetFeedoptConfigParams
constexpr uint16_t OpenCNServerInterface::GetFeedoptConfigParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetFeedoptConfigParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetFeedoptConfigParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetFeedoptConfigParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetFeedoptConfigResults
constexpr uint16_t OpenCNServerInterface::GetFeedoptConfigResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetFeedoptConfigResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetFeedoptConfigResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetFeedoptConfigResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathStartChannelParams
constexpr uint16_t OpenCNServerInterface::ToolpathStartChannelParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathStartChannelParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathStartChannelParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathStartChannelParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathStartChannelResults
constexpr uint16_t OpenCNServerInterface::ToolpathStartChannelResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathStartChannelResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathStartChannelResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathStartChannelResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathStopChannelParams
constexpr uint16_t OpenCNServerInterface::ToolpathStopChannelParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathStopChannelParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathStopChannelParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathStopChannelParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathStopChannelResults
constexpr uint16_t OpenCNServerInterface::ToolpathStopChannelResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathStopChannelResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathStopChannelResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathStopChannelResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathReadSamplesParams
constexpr uint16_t OpenCNServerInterface::ToolpathReadSamplesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathReadSamplesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathReadSamplesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathReadSamplesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::ToolpathReadSamplesResults
constexpr uint16_t OpenCNServerInterface::ToolpathReadSamplesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::ToolpathReadSamplesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::ToolpathReadSamplesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::ToolpathReadSamplesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SendFileParamParams
constexpr uint16_t OpenCNServerInterface::SendFileParamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SendFileParamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SendFileParamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SendFileParamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SendFileParamResults
constexpr uint16_t OpenCNServerInterface::SendFileParamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SendFileParamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SendFileParamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SendFileParamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SendFileDataParams
constexpr uint16_t OpenCNServerInterface::SendFileDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SendFileDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SendFileDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SendFileDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SendFileDataResults
constexpr uint16_t OpenCNServerInterface::SendFileDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SendFileDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SendFileDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SendFileDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::PathExistParams
constexpr uint16_t OpenCNServerInterface::PathExistParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::PathExistParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::PathExistParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::PathExistParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::PathExistResults
constexpr uint16_t OpenCNServerInterface::PathExistResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::PathExistResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::PathExistResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::PathExistResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::CreateFolderParams
constexpr uint16_t OpenCNServerInterface::CreateFolderParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::CreateFolderParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::CreateFolderParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::CreateFolderParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::CreateFolderResults
constexpr uint16_t OpenCNServerInterface::CreateFolderResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::CreateFolderResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::CreateFolderResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::CreateFolderResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLoadStreamParams
constexpr uint16_t OpenCNServerInterface::SetLoadStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLoadStreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLoadStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLoadStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetLoadStreamResults
constexpr uint16_t OpenCNServerInterface::SetLoadStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetLoadStreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetLoadStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetLoadStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetPauseStreamParams
constexpr uint16_t OpenCNServerInterface::SetPauseStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetPauseStreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetPauseStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetPauseStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetPauseStreamResults
constexpr uint16_t OpenCNServerInterface::SetPauseStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetPauseStreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetPauseStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetPauseStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SamplerNewFileParams
constexpr uint16_t OpenCNServerInterface::SamplerNewFileParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SamplerNewFileParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SamplerNewFileParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SamplerNewFileParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SamplerNewFileResults
constexpr uint16_t OpenCNServerInterface::SamplerNewFileResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SamplerNewFileResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SamplerNewFileResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SamplerNewFileResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetFileDataParams
constexpr uint16_t OpenCNServerInterface::GetFileDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetFileDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetFileDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetFileDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetFileDataResults
constexpr uint16_t OpenCNServerInterface::GetFileDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetFileDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetFileDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetFileDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSamplerDownloadFileParams
constexpr uint16_t OpenCNServerInterface::SetSamplerDownloadFileParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSamplerDownloadFileParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSamplerDownloadFileParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSamplerDownloadFileParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSamplerDownloadFileResults
constexpr uint16_t OpenCNServerInterface::SetSamplerDownloadFileResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSamplerDownloadFileResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSamplerDownloadFileResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSamplerDownloadFileResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpindleThresholdParams
constexpr uint16_t OpenCNServerInterface::SetSpindleThresholdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpindleThresholdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpindleThresholdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpindleThresholdParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetSpindleThresholdResults
constexpr uint16_t OpenCNServerInterface::SetSpindleThresholdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetSpindleThresholdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetSpindleThresholdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetSpindleThresholdResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::StartJogParams
constexpr uint16_t OpenCNServerInterface::StartJogParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::StartJogParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::StartJogParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::StartJogParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::StartJogResults
constexpr uint16_t OpenCNServerInterface::StartJogResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::StartJogResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::StartJogResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::StartJogResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFreeToolParams
constexpr uint16_t OpenCNServerInterface::SetFreeToolParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFreeToolParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFreeToolParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFreeToolParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFreeToolResults
constexpr uint16_t OpenCNServerInterface::SetFreeToolResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFreeToolResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFreeToolResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFreeToolResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFreePaletteParams
constexpr uint16_t OpenCNServerInterface::SetFreePaletteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFreePaletteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFreePaletteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFreePaletteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::SetFreePaletteResults
constexpr uint16_t OpenCNServerInterface::SetFreePaletteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::SetFreePaletteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::SetFreePaletteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::SetFreePaletteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetMachineLimitsParams
constexpr uint16_t OpenCNServerInterface::GetMachineLimitsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetMachineLimitsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetMachineLimitsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetMachineLimitsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// OpenCNServerInterface::GetMachineLimitsResults
constexpr uint16_t OpenCNServerInterface::GetMachineLimitsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t OpenCNServerInterface::GetMachineLimitsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind OpenCNServerInterface::GetMachineLimitsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* OpenCNServerInterface::GetMachineLimitsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



